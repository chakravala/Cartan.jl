var documenterSearchIndex = {"docs":
[{"location":"videos/#Cartan.jl-videos","page":"Videos","title":"Cartan.jl videos","text":"","category":"section"},{"location":"videos/","page":"Videos","title":"Videos","text":"TensorField topology over FrameBundle âˆ‡ with Grassmann.jl elements","category":"page"},{"location":"videos/","page":"Videos","title":"Videos","text":"(Image: DOI) (Image: Docs Dev) (Image: GitHub tag (latest SemVer)) (Image: Build status) (Image: PDF 2021) (Image: PDF 2025)","category":"page"},{"location":"videos/","page":"Videos","title":"Videos","text":"Pages = [\"index.md\",\"fiber.md\",\"library.md\",\"plot.md\"]","category":"page"},{"location":"videos/","page":"Videos","title":"Videos","text":"youtube.com/@CrucialFlowResearch, odysee.com/@dreamscatter","category":"page"},{"location":"videos/","page":"Videos","title":"Videos","text":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GOKfTbExD_Q?si=6UN3RDJ9_yBe7Y7F\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/worMICG1MaI?si=gOBmgMtErWRC8zHm\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hwOd6ctv67o?si=imjgbuArkuVsKClY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ltx1D0K6Nqg?si=UOVk5JX-1_1BfWSX\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/EUYpqdcRGq0?si=3RvnffI4SSgs1kRi\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2gE0Gvw_88M?si=R0V10RYJQEb-e0NI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4PH1WIRozhk?si=XbgmagjS3jnbnnsE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7hlDRLEhc8o?si=hdmysjRddeZ_XZnP\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/t84X5OBb89g?si=fd6PTVJT5WrpnA6o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/C3Nlq-cuAws?si=KlGp7Vhr98gSJUzx\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/E5cvRClsPwQ?si=r6C_m7QzMLQhi3pJ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2ofvi5Wq6So?si=P49S-hrLal6r3NsN\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/C-nGcQvWSPE?si=Dpn2-EvEKlTxVwEV\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eQjDN0JQ6-s?si=0iK_9uzOvU27kE2p\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yv3SCHdRg0c?si=tCMhxj1JZeEbjM2y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cchGLYOphkg?si=VEMFfT5h8M84csyq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>","category":"page"},{"location":"library/#Cartan.jl-Library","page":"Library","title":"Cartan.jl Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Pages = [\"index.md\",\"fiber.md\",\"videos.md\",\"library.md\",\"plot.md\"]","category":"page"},{"location":"library/#Cartan.Coordinate","page":"Library","title":"Cartan.Coordinate","text":"Coordinate{P,G} <: LocalFiber{P,G} <: Number\n\nDefines a Coordinate bundled type with pointtype of P and metrictype of G.\n\npoint(s) # ::P\nmetricextensor(s) # ::G\npointtype(s) # P\nmetrictype(s) # G\n\nA Coordinate{P,G} consists of two components: P, which represents the point manifold, and G, which represents the metricextensor bundle over P.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.Coordinates","page":"Library","title":"Cartan.Coordinates","text":"Coordinates{P,G,N} <: FiberBundle{Coordinate{P,G},N} <: Number\n\nDefines a FiberBundle type with pointtype of P and metrictype of G.\n\ncoordinates(s) # ::AbstractArray{Coordinate{P,G},N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # Coordinate{P,G}\npointtype(s) # P\nmetrictype(s) # G\n\nVarious methods work on any Coordinates, such as base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.DiscontinuousTopology","page":"Library","title":"Cartan.DiscontinuousTopology","text":"DiscontinuousTopology{N} <: ImmersedTopology{N,1}\n\nDefines discontinuous subspace of a fulltopology over N-dimensional Simplex spaces having vertices and  subelements defined and indexed in its simplicial complex.\n\nisdiscontinuous(t) # true if DiscontinuousTopology\nisdisconnected(t) # true if graph of discontinuous\n\nCalling DiscontinuousToppology(::SimplexTopology) initializes a discontinuous variant, while SimplexTopology(::DiscontinuousTopology) returns the initial continuous data. Related methods include bundle, fulltopology, topology, fullvertices, vertices, totalelements, elements, subelements, totalnodes, nodes, istotal, isfull, iscover, fullimmersion, subimmersion, isdiscontinuous, isdisconnected, continuous, discontinuous, disconnect.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.FaceBundle","page":"Library","title":"Cartan.FaceBundle","text":"FaceBundle{N,C} <: FrameBundle{C,1} <: FiberBundle{C,1}\n\nDefines a FrameBundle over element faces with coordinatetype of C and immersion.\n\ncoordinates(s) # ::AbstractArray{C,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # C\npointtype(s) # P\nmetrictype(s) # G\nimmersion(s) # ::ImmersedTopology\n\nVarious methods work on any FrameBundle, such as isbundle,base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype, immersion.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.FiberBundle","page":"Library","title":"Cartan.FiberBundle","text":"FiberBundle{T,N} <: Number\n\nDefines a global FiberBundle type with basetype and fibertype over N dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.FiberProduct","page":"Library","title":"Cartan.FiberProduct","text":"FiberProduct{P,N} <: FiberBundle{Coordinate{P,InducedMetric},N}\n\nRepresents a FiberProduct over a base and fiber with InducedMetric.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.FiberProductBundle","page":"Library","title":"Cartan.FiberProductBundle","text":"FiberProductBundle{P,N} <: FrameBundle{Coordinate{P,InducedMetric},N}\n\nRepresents a FiberProductBundle over a base and fiber with InducedMetric.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.FrameBundle","page":"Library","title":"Cartan.FrameBundle","text":"FrameBundle{C,N} <: GlobalFiber{C,N} <: FiberBundle{C,N}\n\nDefines a GlobalFiber type with coordinatetype of C and immersion.\n\ncoordinates(s) # ::AbstractArray{C,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # C\npointtype(s) # P\nmetrictype(s) # G\nimmersion(s) # ::ImmersedTopology\n\nVarious methods work on any FrameBundle, such as isbundle, base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype, immersion.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.Global","page":"Library","title":"Cartan.Global","text":"Global{N,T} <: AbstractArray{T,N}\n\nRepresents an AbstractArray where every local value is globally the same.\n\njulia> Global{1}(InducedMetric())\nGlobal{1}(InducedMetric())\n\njulia> ans[1]\nInducedMetric()\n\nFor example, Global{N,InducedMetric} is commonly used for a globally induced metric.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.GlobalFiber","page":"Library","title":"Cartan.GlobalFiber","text":"GlobalFiber{E,N} <: FiberBundle{E,N} <: Number\n\nDefines a FiberBundle type with basetype and fibertype.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.GridBundle","page":"Library","title":"Cartan.GridBundle","text":"GridBundle{N,C} <: FrameBundle{C,N} <: FiberBundle{C,N}\n\nDefines a FrameBundle over grid points with coordinatetype of C and immersion.\n\ncoordinates(s) # ::AbstractArray{C,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # C\npointtype(s) # P\nmetrictype(s) # G\nimmersion(s) # ::QuotientTopology\n\nVarious methods work on any FrameBundle, such as isbundle, base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype, immersion.\n\nIntervalRange{P, G, PA, GA} where {P<:Real, G, PA<:AbstractRange, GA} (alias for GridBundle{1, Coordinate{P, G}, <:PointArray{P, G, 1, PA, GA}} where {P<:Real, G, PA<:AbstractRange, GA})\nAlignedRegion{N} where N (alias for GridBundle{N, Coordinate{P, G}, PointArray{P, G, N, PA, GA}} where {N, P<:Chain, G<:InducedMetric, PA<:(ProductSpace{V, <:Real, N, N, <:AbstractRange} where V), GA<:Global})\nAlignedSpace{N} where N (alias for GridBundle{N, Coordinate{P, G}, PointArray{P, G, N, PA, GA}} where {N, P<:Chain, G<:InducedMetric, PA<:(ProductSpace{V, <:Real, N, N, <:AbstractRange} where V), GA})\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.HomotopyBundle","page":"Library","title":"Cartan.HomotopyBundle","text":"HomotopyBundle{P,N} <: FrameBundle{Coordinate{P,InducedMetric},N}\n\nRepresents a HomotopyBundle over a base and fiber with InducedMetric.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.ImmersedTopology","page":"Library","title":"Cartan.ImmersedTopology","text":"ImmersedTopology{N,M} = AbstractArray{Values{N,Int},M}\n\nAny ImmersedTopology{N,M} is also an M-dimensional AbstractArray of Values{N,Int}.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.LocalFiber","page":"Library","title":"Cartan.LocalFiber","text":"LocalFiber{B,F} <: Number\n\nDefines abstract bundled type with basetype of B and fibertype of F in a manifold.\n\nbase(s) # ::B\nfiber(s) # ::F\nbasetype(s) # B\nfibertype(s) # F\n\nA LocalFiber{B,F} consists of two components: B, which represents the base manifold, and F, which represents the fiber bundle over B.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.LocalTensor","page":"Library","title":"Cartan.LocalTensor","text":"LocalTensor{B,F} <: LocalFiber{B,F} <: Number\n\nDefines a local bundled type with basetype of B and fibertype of F.\n\nbase(s) # ::B\nfiber(s) # ::F\nbasetype(s) # B\nfibertype(s) # F\n\nA LocalTensor{B,F} consists of two components: B, which represents the base manifold, and F, which represents the fiber bundle over B.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.PointArray","page":"Library","title":"Cartan.PointArray","text":"PointArray{P,G,N} <: FiberBundle{Coordinate{P,G},N} <: Number\n\nDefines a FiberBundle type with pointtype of P and metrictype of G.\n\ncoordinates(s) # ::PointArray{P,G,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # ::Coordinate{P,G}\npointtype(s) # P\nmetrictype(s) # G\n\nVarious methods work on any PointArray, such as base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.ProductSpace","page":"Library","title":"Cartan.ProductSpace","text":"ProductSpace{V,T,N,M,S} <: AbstractArray{Chain{V,1,T,N},N}\n\nCan be constructed with \\oplus operation âŠ• and AbstractRange,\n\njulia> (0:0.1:1)âŠ•(0:0.1:1)\n11Ã—11 ProductSpace{âŸ¨_11_âŸ©, Float64, 2, 2, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}:\n...\n\ngenerating a lazy array of Chain{V,1} point vectors from the input ranges.\n\nRectangle (alias for ProductSpace{V, T, 2, 2} where {V, T})\nHyperrectangle (alias for ProductSpace{V, T, 3, 3} where {V, T})\nRealRegion{V, T} where {V, T<:Real} (alias for ProductSpace{V, T, N, N, S} where {V, T<:Real, N, S<:AbstractArray{T, 1}})\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.ProductTopology","page":"Library","title":"Cartan.ProductTopology","text":"ProductTopology{N} <: ImmersedTopology{N,N}\n\nDefine basic ProductTopology by ranges of integers,\n\njulia> ProductTopology(11,11)\n11Ã—11 ProductTopology{2, OneTo{Int64}}:\n...\n\njulia> ProductTopology(1:11,1:11)\n11Ã—11 ProductTopology{2, UnitRange{Int64}}:\n...\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.QuotientTopology","page":"Library","title":"Cartan.QuotientTopology","text":"QuotientTopology{N} <: ImmersedTopology{N,N}\n\nGeneralizing upon the ProductTopology, the QuotientTopology defines a quotient identification across the boundary fluxes of the region, from which the differential topology induced compact local substructure is derived.\n\nisopen(t) # true if open topology\niscompact(t) # true if compact topology\n\nCommon instances include OpenTopology, CompactTopology, RibbonTopology, MobiusTopology, WingTopology, MirrorTopology, ClampedTopology, TorusTopology, HopfTopology, KleinTopology, ConeTopology, PolarTopology, SphereTopology, GeographicTopology.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.SimplexBundle","page":"Library","title":"Cartan.SimplexBundle","text":"SimplexBundle{N,C} <: FrameBundle{C,1} <: FiberBundle{C,1}\n\nDefines a FrameBundle over simplex vertices with coordinatetype of C and immersion.\n\ncoordinates(s) # ::AbstractArray{C,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # C\npointtype(s) # P\nmetrictype(s) # G\nimmersion(s) # ::ImmersedTopology\n\nVarious methods work on any FrameBundle, such as isbundle, base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype, immersion.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.SimplexTopology","page":"Library","title":"Cartan.SimplexTopology","text":"SimplexTopology{N} <: ImmersedTopology{N,1}\n\nDefines continuous subspaces of a fulltopology over N-dimensional Simplex spaces having vertices and  subelements defined and indexed in its simplicial complex.\n\nbundle(t) # cache identification\nfulltopology(t) # full element list\nvertices(t) # # subspace vertices\ntotalnodes(t) # full node count\nsubelements(t) # list of elements\nfullvertices(t) # fulltopology vertices\nverticesinv(t) # inverted data of vertices\n\nRelated methods include bundle, fulltopology, topology, fullvertices, vertices, totalelements, elements, subelements, totalnodes, nodes, istotal, isfull, iscover, fullimmersion, subimmersion.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.TensorField","page":"Library","title":"Cartan.TensorField","text":"TensorField{B,F,N} <: GlobalFiber{LocalTensor{B,F},N}\n\nDefines a GlobalFiber type with eltype of LocalTensor{B,F} and immersion.\n\ncoordinates(s) # ::AbstractArray{B,N}\nfiber(s) # ::AbstractArray{F,N}\npoints(s) # ::AbstractArray{P,N}\nmetricextensor(s) # ::AbstractArray{G,N}\ncoordinatetype(s) # B\nfibertype(s) # F\npointtype(s) # P\nmetrictype(s) # G\nimmersion(s) # ::ImmersedTopology\n\nVarious methods work on any TensorField, such as base, fiber, coordinates, points, metricextensor, basetype, fibertype, coordinatetype, pointtype, metrictype, immersion. Due to the versatility of the TensorField type instances, it's possible to disambiguate them into these type alias specifications with associated methods: ElementMap, SimplexMap, FaceMap, IntervalMap, RectangleMap, HyperrectangleMap, ParametricMap, Variation, RealFunction, PlaneCurve, SpaceCurve, AbstractCurve, SurfaceGrid, VolumeGrid, ScalarGrid, DiagonalField, EndomorphismField, OutermorphismField, CliffordField, QuaternionField, ComplexMap, PhasorField, SpinorField, GradedField{G} where G, ScalarField, VectorField, BivectorField, TrivectorField.\n\nIn the Cartan package, a technique is employed where a TensorField is constructed from an interval, product manifold, or topology, to generate an algebra of sections which can be used to compose parametric maps on manifolds. Constructing a TensorField can be accomplished in various ways, there are explicit techniques to construct a TensorField as well as implicit methods. Additional packages such as Adapode build on the TensorField concept by generating them from differential equations. Many of these methods can automatically generalize to higher dimensional manifolds and are compatible with discrete differential geometry.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.coordinates","page":"Library","title":"Cartan.coordinates","text":"coordinates(m::FiberBundle) -> FiberBundle{Coordinate{P,G}}\n\nReturn a FiberBundle{Coordinate{P,G}} if object m is defined as a FiberBundle.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.immersion","page":"Library","title":"Cartan.immersion","text":"immersion(m) -> ImmersedTopology\n\nReturns the associated ImmersedTopology of any FrameBundle or related object.\n\n\n\n\n\n","category":"type"},{"location":"library/#Cartan.base-Tuple{FiberBundle}","page":"Library","title":"Cartan.base","text":"base(m::LocalFiber{B,F}) -> B\n\nReturn the base of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.basetype-Union{Tuple{Array{T}}, Tuple{T}} where T","page":"Library","title":"Cartan.basetype","text":"basetype(m::LocalFiber{B,F}) -> DataType\n\nReturn the basetype of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.bundle-Tuple{SimplexTopology}","page":"Library","title":"Cartan.bundle","text":"bundle(m::ImmersedTopology) -> Int\n\nReturns integer identification of bundle cache.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.continuous-Tuple{SimplexTopology}","page":"Library","title":"Cartan.continuous","text":"continuous(m) -> ImmersedTopology\n\nReturn the original continuous data of possibly a DiscontinuousTopology.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.coordinatetype-Tuple{FiberBundle{Coordinate{P, G}} where {P, G}}","page":"Library","title":"Cartan.coordinatetype","text":"coordinatetype(m::Coordinate{P,G}) -> DataType\n\nReturn the coordinatetype of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.disconnect-Tuple{SimplexTopology}","page":"Library","title":"Cartan.disconnect","text":"disconnect(m) -> DiscontinuousTopology\n\nReturn a disconnected variant of a DiscontinuousTopology.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.discontinuous-Tuple{DiscontinuousTopology}","page":"Library","title":"Cartan.discontinuous","text":"discontinuous(m) -> DiscontinuousTopology\n\nReturn a derived DiscontinuousTopology from a SimplexTopology.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.elements-Tuple{SimplexTopology}","page":"Library","title":"Cartan.elements","text":"elements(m) -> Int\n\nReturn the number of subelements(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fiber-Tuple{FiberBundle}","page":"Library","title":"Cartan.fiber","text":"fiber(m::LocalFiber{B,F}) -> F\n\nReturn the fiber of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fibertype-Union{Tuple{Array{T}}, Tuple{T}} where T","page":"Library","title":"Cartan.fibertype","text":"fibertype(m::LocalFiber{B,F}) -> DataType\n\nReturn the fibertype of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fullcoordinates-Tuple{FiberBundle{Coordinate{P, G}} where {P, G}}","page":"Library","title":"Cartan.fullcoordinates","text":"fullcoordinates(m::FiberBundle) -> FiberBundle{Coordinate{P,G}}\n\nReturn full FiberBundle{Coordinate{P,G}} instead of a possible subspace of it.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fullimmersion-Tuple{AbstractArray{Values{N, Int64}} where N}","page":"Library","title":"Cartan.fullimmersion","text":"fullimmersion(m) -> ImmersedTopology\n\nReturns full associated ImmersedTopology of subspace FrameBundle or related object.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fullmetricextensor-Tuple{FiberBundle}","page":"Library","title":"Cartan.fullmetricextensor","text":"fullmetricextensor(m::FiberBundle) -> AbstractArray{G}\n\nReturn full AbstractArray{G} instead of a possible subspace of it.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fullpoints-Tuple{FiberBundle}","page":"Library","title":"Cartan.fullpoints","text":"fullpoints(m::FiberBundle) -> AbstractArray{P}\n\nReturn full AbstractArray{P} instead of a possible subspace of it.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fulltopology-Tuple{SimplexTopology}","page":"Library","title":"Cartan.fulltopology","text":"fulltopology(m) -> Vector{Values{N,Int}}\n\nReturns the fulltopology regardless of whether the ImmersedTopology subset isfull.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.fullvertices-Tuple{SimplexTopology}","page":"Library","title":"Cartan.fullvertices","text":"fullvertices(m) -> AbstractVector{Int}\n\nReturn the list of vertices(m) associated to the fullimmersion(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.getfacet-Tuple{SimplexTopology{N, P, <:AbstractVector} where {N, P}, Any}","page":"Library","title":"Cartan.getfacet","text":"getfacet(m,i) -> Int\n\nReturn the index of subelements in reference to the fullimmersion.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.getimage-Tuple{SimplexTopology{N, <:AbstractVector} where N, Any}","page":"Library","title":"Cartan.getimage","text":"getimage(m,i) -> Int\n\nReturn the index of vertex subspace immersion in reference to the fullimmersion.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.immersiontype-Tuple{AbstractArray{Values{N, Int64}} where N}","page":"Library","title":"Cartan.immersiontype","text":"immersiontype(m) -> DataType\n\nReturns the typeof the immersion of m.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.iscover-Tuple{SimplexTopology}","page":"Library","title":"Cartan.iscover","text":"iscover(m::SimplexTopology) -> Bool\n\nReturn true if isfull(m) && istotal(m), and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.isdisconnected-Tuple{SimplexTopology}","page":"Library","title":"Cartan.isdisconnected","text":"isdiscontinuous(m) -> Bool\n\nReturn true if m is a disconnected DiscontinuousTopology.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.isdiscontinuous-Tuple{SimplexTopology}","page":"Library","title":"Cartan.isdiscontinuous","text":"isdiscontinuous(m) -> Bool\n\nReturn true if m is a DiscontinuousTopology.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.isfull-Union{Tuple{SimplexTopology{N, P, F, T} where {N, P, F}}, Tuple{T}} where T","page":"Library","title":"Cartan.isfull","text":"isfull(m::SimplexTopology) -> Bool\n\nReturn true if m is equal to fulltopology(m), and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.isinduced-Tuple{FiberBundle}","page":"Library","title":"Cartan.isinduced","text":"isinduced(m) -> Bool\n\nReturn true if the metrictype is an InducedMetric type.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.istotal-Union{Tuple{SimplexTopology{N, P, F, T} where {N, P, F}}, Tuple{T}} where T","page":"Library","title":"Cartan.istotal","text":"istotal(m::SimplexTopology) -> Bool\n\nReturn true if fulltopology(m) is covering totalnodes(m), and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.metrictype-Tuple{FiberBundle}","page":"Library","title":"Cartan.metrictype","text":"metrictype(m::Coordinate{P,G}) -> DataType\n\nReturn the metrictype of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.nodes-Tuple{SimplexTopology}","page":"Library","title":"Cartan.nodes","text":"nodes(m) -> Int\n\nReturn the number of vertices(m) associated to the subspace immersion(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.pointtype-Tuple{FiberBundle}","page":"Library","title":"Cartan.pointtype","text":"pointtype(m::Coordinate{P,G}) -> DataType\n\nReturn the pointtype of a FiberBundle or LocalFiber.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.refnodes-Tuple{SimplexTopology}","page":"Library","title":"Cartan.refnodes","text":"refnodes(m) -> Base.RefValaue{Int}\n\nReturn the shared mutable Base.RefValue{Int} which counts nodes(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.resample-Tuple{OneTo, Int64}","page":"Library","title":"Cartan.resample","text":"resample(m,i...)\n\nResamples a ranged ProductSpace or related objects.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.sdims-Union{Tuple{AbstractArray{Values{N, Int64}}}, Tuple{N}} where N","page":"Library","title":"Cartan.sdims","text":"sdims(::ImmersedTopology{N}) where N = N\n\nDimension N of the associated immersed simplex.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.subelements-Tuple{SimplexTopology}","page":"Library","title":"Cartan.subelements","text":"subelements(m) -> AbstractVector{Int}\n\nReturn the subspace element indices associated to fulltopology(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.subimmersion-Tuple{SimplexTopology{N, <:OneTo} where N}","page":"Library","title":"Cartan.subimmersion","text":"subimmersion(m) -> ImmersedTopology\n\nReturn a modified subimmersion with all vertices re-indexed based on the subspace.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.topology-Tuple{SimplexTopology}","page":"Library","title":"Cartan.topology","text":"topology(m) -> AbstractVector{Values{N,Int}}\n\nReturns a view into the fulltopology based on subelements(m) structure.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.totalelements-Tuple{SimplexTopology}","page":"Library","title":"Cartan.totalelements","text":"totalelements(m) -> Int\n\nReturn the total number of elements in the fulltopology(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.totalnodes-Tuple{SimplexTopology}","page":"Library","title":"Cartan.totalnodes","text":"totalnodes(m) -> Int\n\nReturn the number which counts the total number of nodes regardless of subspace.\n\n\n\n\n\n","category":"method"},{"location":"library/#Cartan.vertices-Tuple{SimplexTopology}","page":"Library","title":"Cartan.vertices","text":"vertices(m) -> AbstractVector{Int}\n\nReturn the list of vertices(m) associated to the subspace immersion(m).\n\n\n\n\n\n","category":"method"},{"location":"library/#DirectSum.:âŠ•-Tuple{Vararg{AbstractVector{<:Real}}}","page":"Library","title":"DirectSum.:âŠ•","text":"âŠ•(v::AbstractVector{<:Real}...)\n\nConstructs a direct sum basis space using the Cartesian ProductSpace implementation.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.points-Tuple{PointArray}","page":"Library","title":"Grassmann.points","text":"points(m) -> AbstractArray{P}\n\nReturn the points as an AbstractArray{P}.\n\n\n\n\n\n","category":"method"},{"location":"fiber/#Cartan.jl-language-design","page":"Fiber","title":"Cartan.jl language design","text":"","category":"section"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"TensorField topology over FrameBundle âˆ‡ with Grassmann.jl elements","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(Image: DOI) (Image: Docs Dev) (Image: GitHub tag (latest SemVer)) (Image: Build status) (Image: PDF 2021) (Image: PDF 2025)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Pages = [\"index.md\",\"fiber.md\",\"videos.md\",\"library.md\",\"plot.md\"]","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Initially, Grassmann.jl and Cartan.jl introduced the DirectSum formalism into computational language design for differential geometric algebra, thus enabling the construction of custom algebras through metaprogramming. Grassmann.jl pioneered a novel type system design along with its syntax and semantics, which has undergone significant refinement through many years of development and continuous improvement. Cartan.jl represents a groundbreaking extension of capabilities offered by Grassmann.jl, marking a pioneering fully realized implementation of numerical differential geometric algebra, based on TensorField representations over a FrameBundle and the ImmersedTopology of the FiberBundle. Grassmann.jl and Cartan.jl build on Julia's multiple dispatch and metaprogramming capabilities, presenting a new computational language design approach to interfacing with differential geometric algebra based on a new sector integral theorem. This pioneering design not only actualizes but also elevates computational language syntax to new heights using the foundations of Grassmann.jl and Cartan.jl. The Grassmann.jl and Cartan.jl packages introduce pioneering computational language designs, having inspired imitation projects and thereby validating the project's relevance as significant advance in computational mathematics.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Packages Grassmann.jl and Cartan.jl can be used as universal language for finite element methods based on a discrete manifold bundle. Tools built on these foundations enable computations based on multi-linear algebra and spin groups using the geometric algebra known as Grassmann algebra or Clifford algebra. This foundation is built on a DirectSum parametric type system for tangent bundles and vector spaces generating the algorithms for local tangent algebras in a global context. Geometric algebra mathematical foundations for differential geometry can be used to simplify the Maxwell equations to a single wave equation due to the geometric product. With this unifying mathematical foundation, it is possible to improve efficiency of multi-disciplinary research using geometric tensor calculus by relying on universal mathematical principles. Tools built on this differential geometric algebra provide an excellent language for the newly presented sector integral theorem, the Helmholtz decomposition, and Hodge-DeRahm co/homology.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"The Grassmann.jl package provides tools for computations based on multi-linear algebra and spin groups using the extended geometric algebra known as Grassmann-Clifford-Hodge algebra. Algebra operations include exterior, regressive, inner, and geometric, along with the Hodge star and boundary operators. Code generation enables concise usage of the algebra syntax. DirectSum.jl multivector parametric type polymorphism is based on tangent vector spaces and conformal projective geometry. Additionally, the universal interoperability between different sub-algebras is enabled by AbstractTensors.jl, on which the type system is built. The design is based on TensorAlgebra{V} abstract type interoperability from AbstractTensors.jl with a mathbbK-module type parameter V from DirectSum.jl. Abstract vector space type operations happen at compile-time, resulting in a differential geometric algebra of multivectors.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Building on the Grassmann.jl foundation, the Cartan.jl extension then defines TensorField{B,F,N} <: GlobalFiber{LocalTensor{B,F},N} for both a local ProductSpace and general ImmersedTopology specifications on any FrameBundle expressed with Grassmann.jl algebra. Many of these modular methods can work on input meshes or product topologies of any dimension, although there are some methods which are specialized. Cartan provides an algebra for FiberBundle sections and any associated bundles on a manifold in terms of Grassmann elements. Calculus of Variation fields can also be generated with the combined topology of a FiberProductBundle. Furthermore, the FiberProduct enables construction of HomotopyBundle types. The Cartan package standardizes composition of various methods and functors applied to specialized categories transformed in terms of a unified representation over a product topology, especially having fibers of the Grassmann algebra and using Cartan methods over a FrameBundle.","category":"page"},{"location":"fiber/#Grassmann.jl-API-design-overview","page":"Fiber","title":"Grassmann.jl API design overview","text":"","category":"section"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"The AbstractTensors package is intended for universal interoperation of the abstract TensorAlgebra type system. All TensorAlgebra{V} subtypes have type parameter V, used to store a Submanifold{M} value, which is parametrized by M the TensorBundle choice. This means that different tensor types can have a commonly shared underlying mathbbK-module parametric type expressed by defining V::Submanifold{M}. Each TensorAlgebra subtype must be accompanied by a corresponding TensorBundle parameter, which is fully static at compile time. Due to the parametric type system for the mathbbK-module types, the compiler can fully pre-allocate and often cache.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Let M = T^mu V be a mathbbK-module of rank n, then an instance for T^mu V can be the tuple (nmathbbPgnumu) with mathbbPsubseteq langle v_inftyv_emptysetrangle specifying the presence of the projective basis and gVtimes VrightarrowmathbbK is a metric tensor specification. The type TensorBundle{n,mathbbP,g,nu,mu} encodes this information as byte-encoded data available at pre-compilation, where mu is an integer specifying the order of the tangent bundle (i.e. multiplicity limit of the Leibniz-Taylor monomials). Lastly, nu is the number of tangent variables.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"langle v_1dotsv_n-nupartial_1dotspartial_nurangle=Mleftrightarrow M = langle w_1dotsw_n-nuepsilon_1dotsepsilon_nurangle","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"where v_i and w_i are bases for the vectors and covectors, while partial_i and epsilon_j are bases for differential operators and scalar functions. The purpose of the TensorBundle type is to specify the mathbbK-module basis at compile time. When assigned in a workspace, V = Submanifold(::TensorBundle) is used.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"The metric signature of the Submanifold{V,1} elements of a vector space V can be specified with the V\"...\" by using + or - to specify whether the Submanifold{V,1} element of the corresponding index squares to +1 or -1. For example, S\"+++\" constructs a positive definite 3-dimensional TensorBundle, so constructors such as S\"...\" and D\"...\" are convenient.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"It is also possible to change the diagonal scaling, such as with D\"1,1,1,0\", although the Signature format has a more compact representation if limited to +1 and -1. It is also possible to change the diagonal scaling, such as with D\"0.3,2.4,1\". Fully general MetricTensor as a type with non-diagonal components requires a matrix, e.g. MetricTensor([1 2; 2 3]).","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Declaring an additional point at infinity is done by specifying it in the string constructor with infty at the first index (i.e. Riemann sphere S\"âˆž+++\"). The hyperbolic geometry can be declared by emptyset subsequently (i.e. hyperbolic projection S\"âˆ…+++\"). Additionally, the null-basis based on the projective split for conformal geometric algebra would be specified with S\"âˆžâˆ…+++\". These two declared basis elements are interpreted in the type system. The tangent(V,Î¼,Î½)  map can be used to specify mu and nu.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"To assign V = Submanifold(::TensorBundle) along with associated basis elements of the DirectSum.Basis to the local Julia session workspace, it is typical to use Submanifold elements created by the @basis macro,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann; @basis S\"-++\" # macro or basis\"-++\"","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"the macro @basis V delcares a local basis in Julia. As a result of this macro, all Submanifold{V,G} elements generated with M::TensorBundle become available in the local workspace with the specified naming arguments. The first argument provides signature specifications, the second argument is the variable name for V the mathbbK-module, and the third and fourth argument are prefixes of the Submanifold vector names (and covector names). Default is V assigned Submanifold{M} and v is prefix for the Submanifold{V}.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"It is entirely possible to assign multiple different bases having different signatures without any problems. The @basis macro arguments are used to assign the vector space name to V and the basis elements to v_i, but other assigned names can be chosen so that their local names don't interfere: If it is undesirable to assign these variables to a local workspace, the versatile constructs of DirectSum.Basis{V} can be used to contain or access them, which is exported to the user as the method DirectSum.Basis(V).","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"DirectSum.Basis(V)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"V(::Int...) provides a convenient way to define a Submanifold by using integer indices to reference specific direct sums within the ambient space V.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Additionally, a universal unit volume element can be specified in terms of LinearAlgebra.UniformScaling, which is independent of V and has its interpretation only instantiated by context of TensorAlgebra{V} elements being operated on. Interoperability of LinearAlgebra.UniformScaling as a pseudoscalar element which takes on the TensorBundle form of any other TensorAlgebra element is handled globally. This enables the usage of I from LinearAlgebra as a universal pseudoscalar element defined at every point x of a Manifold, which is mathematically denoted by I = I(x) and specified by the g(x) bilinear tensor field of TM.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Grassmann.jl is a foundation which has been built up from a minimal mathbbK-module algebra kernel on which an entirely custom algbera specification is designed and built from scratch on the base Julia language.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. TensorAlgebra{V,mathbbK} where V::Submanifold{M} for a generating mathbbK-module specified by a M::TensorBundle choice","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"TensorBundle specifies generators of DirectSum.Basis algebra\nInt value induces a Euclidean metric of counted dimension\nSignature uses S\"...\" with + and - specifying the metric\nDiagonalForm uses D\"...\" for defining any diagonal metric\nMetricTensor can accept non-diagonal metric tensor array\nTensorGraded{V,G,mathbbK} has grade G and element of Lambda^GV subspace\nChain{V,G,mathbbK} has a complete basis for Lambda^GV with mathbbK-module\nSimplex{V} alias column-module Chain{V,1,Chain{V,1,mathbbK}}\nTensorTerm{V,G,mathbbK} <: TensorGraded{V,G,mathbbK} single coefficient\nZero{V} is a zero value which preserves V in its algebra type\nSubmanifold{V,G,B} langle v_i_1wedgecdotswedge v_i_Grangle_G with sorted indices B\nSingle{V,G,B,mathbbK} where B::Submanifold{V} is paired to mathbbK\nAbstractSpinor{V,mathbbK} subtypes are special sub-algebras of Lambda V\nCouple{V,B,mathbbK} is the sum of mathbbK scalar with Single{V,G,B,mathbbK}\nPseudoCouple{V,B,mathbbK} is pseudoscalar + Single{V,G,B,mathbbK}\nSpinor{V,mathbbK} has complete basis for the even mathbbZ_2-graded terms\nCoSpinor{V,mathbbK} has complete basis for odd mathbbZ_2-graded terms\nMultivector{V,mathbbK} has complete basis for all Lambda V with mathbbK-module","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. TensorNested{V,T} subtypes are linear transformations","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"TensorOperator{V,W,T} linear map Vrightarrow W with T::DataType\nEndomorphism{V,T} linear map Vrightarrow V with T::DataType\nDiagonalOperator{V,T} diagonal map Vrightarrow V with T::DataType\nDiagonalMorphism{V,<:Chain{V,1}} diagonal map Vrightarrow V\nDiagonalOutermorphism{V,<:Multivector{V}} Lambda Vrightarrow Lambda V\nOutermorphism{V,T} extends Fin Endomorphism{V} to full Lambda V","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"F(v_1)wedgecdotswedge F(v_n) = F(v_1wedgecdotswedge v_n)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Projector{V,T} linear map FVrightarrow V with F(F) = F defined","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"verbProj(xTensorGraded) = fracxxotimesfracxx","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Dyadic{V,X,Y} linear map Vrightarrow V with Dyadic(x,y) = xotimes y","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Grassmann.jl was first to define a comprehensive TensorAlgebra{V} type system from scratch around the idea of the V::Submanifold{M} value to express algebra subtypes for a specified mathbbK-module structure.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. Common unary operations on TensorAlgebra elements","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Manifold returns the parameter V::Submanifold{M} mathbbK-module\nmdims dimensionality of the pseudoscalar V of that TensorAlgebra\ngdims dimensionality of the grade G of V for that TensorAlgebra\ntdims  dimensionality of Multivector{V} for that TensorAlgebra\ngrade returns G for TensorGraded{V,G} while grade(x,g) is langle xrangle_g\nistensor returns true for TensorAlgebra elements\nisgraded returns true for TensorGraded elements\nisterm returns true for TensorTerm elements\ncomplementright Euclidean metric Grassmann right complement\ncomplementleft Euclidean metric Grassmann left complement\ncomplementrighthodge Grassmann-Hodge right complement widetildeomega I\ncomplementlefthodge Grassmann-Hodge left complement Iwidetildeomega\nmetric applies the metricextensor as outermorphism operator\ncometric applies complement metricextensor as outermorphism\nmetrictensor returns gVrightarrow V associated to TensorAlgebra{V}\nmetrictextensor returns Lambda gLambda VrightarrowLambda V for TensorAlgebra{V}\ninvolute grade permutes basis with langleoverlineomegarangle_k = sigma_1(langleomegarangle_k) = (-1)^klangleomegarangle_k\nreverse permutes basis with langlewidetildeomegarangle_k = sigma_2(langleomegarangle_k) = (-1)^k(k-1)2langleomegarangle_k\nclifford conjugate of an element is composite involute circ reverse\neven part selects overlinemathfrakRomega = (omega + overlineomega)2 and is defined by Lambda^g for even g\nodd part selects overlinemathfrakIomega = (omega-overlineomega)2 and is defined by Lambda^g for odd g\nreal part selects widetildemathfrakRomega = (omega+widetildeomega)2 and is defined by widetildemathfrakRomega^2 = (widetildemathfrakRomega)^2\nimag part selects widetildemathfrakIomega = (omega-widetildeomega)2 and is defined by widetildemathfrakIomega^2 = -(widetildemathfrakIomega)^2\nabs is the absolute value omega=sqrtwidetildeomegaomega and abs2 is then omega^2 = widetildeomegaomega\nnorm evaluates a positive definite norm metric on the coefficients\nunit applies normalization defined as unit(t) = t/abs(t)\nscalar selects grade 0 term of any TensorAlgebra element\nvector selects grade 1 terms of any TensorAlgebra element\nbivector selects grade 2 terms of any TensorAlgebra element\ntrivector selects grade 3 terms of any TensorAlgebra element\npseudoscalar max. grade term of any TensorAlgebra element\nvalue returns internal Values tuple of a TensorAlgebra element\nvaluetype returns type of a TensorAlgebra element value's tuple","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Binary operations commonly used in Grassmann algebra syntax","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"+ and - carry over from the mathbbK-module structure associated to mathbbK\nwedge is exterior product wedge and vee is regressive product vee\n> is the right contraction and < is the left contraction for the algebra\n* is the geometric product and / uses inv algorithm for division\noslash is the sandwich and >>> is its alternate operator orientation","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Custom methods related to tensor operators and roots of polynomials","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"inv returns the inverse and adjugate returns transposed cofactor\ndet returns the scalar determinant of an endomorphism operator\ntr returns the scalar trace of an endomorphism operator\ntranspose operator has swapping of row and column indices\ncompound(F,g) is multilinear endomorphism Lambda^gF  Lambda^g VrightarrowLambda^g V\noutermorphism(A) transforms AVrightarrow V into Lambda ALambda VrightarrowLambda V\noperator make linear representation of multivector outermorphism\ncompanion matrix of monic polynomial a_0+a_1z+dots+a_nz^n + z^n+1\nroots(a...) of polynomial with coefficients a_0 + a_1z + dots + a_nz^n\nrootsreal of polynomial with coefficients a_0 + a_1z + dots + a_nz^n\nrootscomplex of polynomial with coefficients a_0 + a_1z + dots + a_nz^n\nmonicroots(a...) of monic polynomial a_0+a_1z+dots+a_nz^n + z^n+1\nmonicrootsreal of monic polynomial a_0+a_1z+dots+a_nz^n + z^n+1\nmonicrootscomplex of monic polynomial a_0+a_1z+dots+a_nz^n + z^n+1\ncharacteristic(A) polynomial coefficients from det (A-lambda I)\neigvals(A) are the eigenvalues lambda_1dotslambda_n so that A e_i = lambda_i e_i\neigvalsreal are real eigenvalues lambda_1dotslambda_n so that A e_i = lambda_i e_i\neigvalscomplex are complex eigenvalues lambda_1dotslambda_n so A e_i = lambda_i e_i\neigvecs(A) are the eigenvectors e_1dotse_n so that A e_i = lambda_i e_i\neigvecsreal are real eigenvectors e_1dotse_n so that A e_i = lambda_i e_i\neigvecscomplex are complex eigenvectors e_1dotse_n so A e_i = lambda_i e_i\neigen(A) spectral decomposition sum_i lambda_itextProj(e_i) with A e_i = lambda_i e_i\neigenreal spectral decomposition sum_i lambda_itextProj(e_i) with A e_i = lambda_i e_i\neigencomplex spectral decomposition sum_i lambda_itextProj(e_i) so A e_i = lambda_i e_i\neigpolys(A) normalized symmetrized functions of eigvals(A)\neigpolys(A,g) normalized symmetrized function of eigvals(A)\nvandermonde facilitates ((XX)^-1 X)y for polynomial coefficients\ncayley(V,circ) returns product table for V and binary operation circ","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Accessing metrictensor(V) produces a linear map g Vrightarrow V which can be extended to Lambda gLambda VrightarrowLambda V outermorphism given by metricextensor. To apply the metricextensor to any Grassmann element of Lambda V, the function metric can be used on the element, cometric applies a complement metric.","category":"page"},{"location":"fiber/#Tensor-field-topology-and-fiber-bundles","page":"Fiber","title":"Tensor field topology and fiber bundles","text":"","category":"section"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. Commonly used fundamental building blocks are","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"ProductSpace{V,mathbbK,N} <: AbstractArray{Chain{V,1,mathbbK,N},N}\nuses Cartesian products of interval subsets of mathbbRtimesmathbbRtimescdotstimesmathbbR = Lambda^1 mathbbR^n,\ngenerates lazy array of Chain{V,1} point vectors from input ranges\nProductSpace{V}(0:0.1:1,0:0.1:1) # specify V\nProductSpace(0:0.1:1,0:0.1:1) # auto-select V\nProductSpace{V}(r::AbstractVector{<:Real}...) default\noplus(r::AbstractVector{<:Real}...) for algebraic syntax\nGlobal{N,T} represents array with same T value at all indices\nLocalFiber{B,F} has a local basetype of B and fibertype of F\nCoordinate{P,G} has pointtype of P and metrictype of G\nImmersedTopology{N,M} = AbstractArray{Values{N,Int},M}\nProductTopology generates basic product topologies for grids\nSimplexTopology defines continuous simplex immersion\nDiscontinuousTopology disconnects for discontinuous\nLagrangeTopology extends for Lagrange polynomial base\nQuotientTopology defines classes of quotient identification","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Generalizing upon ProductTopology, the QuotientTopology defines a quotient identification across the boundary fluxes of the region, which then enables different specializations of QuotientTopology as","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"OpenTopology: all boundaries don't have accumulation points,\nCompactTopology: all points have a neighborhood topology,\nCylinderTopology: closed ribbon with two edge open endings,\nMobiusTopology: twisted ribbon with one edge open ending,\nWingTopology: upper and lower surface topology of wing,\nMirrorTopology: reflection boundary along mirror (basis) axis,\nClampedTopology: each boundary face is reflected to be compact,\nTorusTopology: generalized compact torus up to 5 dimensions,\nHopfTopology: compact topology of the Hopf fibration in 3D,\nKleinTopology: compact topology of the Klein bottle domain,\nPolarTopology: polar compactification with open edge boundary,\nSphereTopology: generalized mathematical sphere, compactified,\nGeographicTopology: axis swapped from SphereTopology in 2D.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Combination of PointArray <: Coordinates and ImmersedTopology leads into definition of TensorField as a global section of a FrameBundle.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"All these methods apply to SimplexTopology except isopen, iscompact","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"isopen is true if QuotientTopology is an OpenTopology instance\niscompact is true if QuotientTopology is a CompactTopology\nnodes counts number of vertices associated to SimplexTopology\nsdims counts the number of vertices N of a SimplexTopology{N}\nsubelements subspace element indices associated to fulltopology\nsubimmersion modified with vertices re-indexed based on subspace\ntopology view into fulltopology based on subelements structure\ntotalelements counts total number of elements in fulltopology\ntotalnodes counts total number of nodes over all subspaces\nvertices list of indices associated to the subspace immersion\nelements counts the number of subelements in the immersion\nisfull is true if the immersion is a fulltopology, not a subspace\nistotal is true if fulltopology is covering totalnodes completely\niscover is true if isfull and istotal, fully covering totalnodes\nisdiscontinuous is true if an instance of DiscontinuousTopology\nisdisconnected is true if isdiscontinuous and fully disconnected\ncontinuous returns original data from DiscontinuousTopology\ndiscontinuous allocates a derived DiscontinuousTopology\ndisconnect allocates a disconnected DiscontinuousTopology\ngetfacet indexing subelements in reference to the fullimmersion\ngetimage indexing vertex subspace in reference to fullimmersion\nedges assembles SimplexTopology{2} of all unique edge elements\nfacets assembles SimplexTopology of all unique facet elements\ncomplement returns a SimplexTopology based on subelements\ninterior returns the interior components of a SimplexTopology\npartial operator returns boundary components of a SimplexTopology\ndegrees returns the (graph) degree for each incidence vertex\nweights divides each incidence vertex by the (graph) degree\nadjacency returns a symmetric sparse matrix with ones at vertices\nantiadjacency returns sparse matrix with vertex antisymmetry\nincidence returns heterogenous relation for vertices and elements\nlaplacian returns the (graph) Laplacian with adjacent vertices\nneighbors finds neighboring elements per SimplexTopology facet","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. An n-dimensional manifold M requires the existence of a neighborhood U for each pin Usubseteq M with a local chart map phi  U_phirightarrowmathbbR^n. Given another chart psi U_psirightarrowmathbbR^n, then the combinatorial compositions","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"phicircpsi^-1  psi(U_phicap U_psi)rightarrowphi(U_phicap U_psi) quad psicircphi^-1  phi(U_phicap U_psi) rightarrow psi(U_phicap U_psi)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"are the transition maps. If all the transition maps phi are mathcalC^r differentiable and bigcup_phi U_phi = M, then the collection of charts is called an atlas of a mathcalC^r-manifold.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. A fiber bundle is a manifold E with projection pi E rightarrow B commutes with local trivializations phi paired to U_phi of manifold B = bigcup_phi U_phi","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"phi pi^-1(U_phi) rightarrow U_phitimes F qquad pi^-1(U_phi) oversetpilongrightarrow U_phi oversetpi_1longleftarrow U_phitimes F","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"where B is the basetype and F is the fibertype of E_p = pi^-1(p)  = ptimes F,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"E = bigcup_pin BE_p = bigcup_pin B ptimes F = Btimes F qquad B = bigcup_phi U_phi","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"FiberBundle{E,N} <: AbstractArray{E,N} where E is the eltype","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Coordinates{P,G,N} <: FiberBundle{Coordinate{P,G},N}\nPointArray{P,G,N} has pointtype of P, metrictype of G\nFiberProduct introduces fiber product structure for manifolds\nFrameBundle{C,N} has coordinatetype of C and immersion\nGridBundle{N,C} N-grid with coordianates and immersion\nSimplexBundle{N,C} defines coordinates and an immersion\nFaceBundle{N,C} defines element faces and their immersion\nFiberProductBundle for extruding dimensions from simplices\nHomotopyBundle encapsulates a variation as FrameBundle\nTensorField defines fibers in a global section of a FrameBundle","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"When a TensorField has a fibertype from Lambda^gTV then it is a grade g differential form on the tangent bundle of V. In general the TensorField type can deal with more abstract fibertype varieties than only those used for differential forms, as it unifies many different forms of tensor analysis.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"By default, the InducedMetric is defined globally in each PointArray, unless a particular metric tensor specification is provided. When the default InducedMetric is invoked, the metric tensor from the TensorAlgebra{V} type is used for the global manifold, instead of the extra allocation to specify metric tensors at each point. FrameBundle then defines local charts along with metric tensor in a PointArray and pairs it with an ImmersedTopology. Then the fiber of a FrameBundle section is a fiber of a TensorField.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"These methods relate to FrameBundle and TensorField instances","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"coordinates(m::FiberBundle) returns Coordinates data type\ncoordinatetype return applies to FiberBundle or LocalFiber\nimmersion(m::FiberBundle) returns ImmersedTopology data\nimmersiontype return applies to FiberBundle or LocalFiber\nbase returns the B element of a LocalFiber{B,F} or FiberBundle\nbasetype returns type B of a LocalFiber{B,F} or FiberBundle\nfiber returns the F element of LocalFiber{B,F} or FiberBundle\nfibertype returns the F type of LocalFiber{B,F} or FiberBundle\npoints returns AbstractArray{P} data for Coordinates{P,G}\npointtype is type P of Coordinate{P,G} or Coordinates{P,G}\nmetrictensor returns the grade 1 block of the metricextensor\nmetricextensor is AbstractArray{G} data for Coordinates{P,G}\nmetrictype is type G of Coordinate{P,G} or Coordinates{P,G}\nfullcoordinates returns full FiberBundle{Coordinate{P,G}}\nfullimmersion returns superset ImmersedTopology which isfull\nfulltopology returns composition of topology circ fullimmersion\nfullvertices list of vertices associated to the fullimmersion\nfullpoints is full AbstractArray{P} instead of possibly subspace\nfullmetricextensor is full AbstractArray{G} instead of subspace\nisinduced is true if the metrictype is an InducedMetric type\nbundle returns the integer identification of bundle cache","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Various interpolation methods are also supported and can be invoked by applying TensorField instances as function evaluations on base manifold or applying some form of resampling method to the manifold topology.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"volumes returns FaceBundle with simplex volume at each element\ninitmesh provides API keyword for interfacing mesh initialization\nrefinemesh provides API keyword for interfacing mesh refinement\naffinehull returns a localized affine simplex hull at each element\naffineframe returns a localized affine basis frame at each element\ngradienthat returns the hat gradients for the SimplexBundle","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"For GridBundle initialization it is typical to invoke a combination of ProductSpace and QuotientTopology, while optional Julia packages extend SimplexBundle initialization, such as Meshes.jl, GeometryBasics.jl, Delaunay.jl, QHull.jl, MiniQhull.jl, Triangulate.jl, TetGen.jl, MATLAB.jl, FlowGeometry.jl.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. Let gammaab rightarrow mathbb R^n be a curve gamma(t) with parameter t.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"integral(::IntervalMap) cumulative trapezoidal sum int_a^tgamma(xi)dxi\nintegrate(::IntervalMap) final value of int_a^bgamma(t) dt on interval end\narclength(::IntervalMap) curve parameter s(t) = int_a^t fracdgamma(xi)dxidxi\ntangent(::IntervalMap) tangent speed curve fracdgamma(t)dt = fracdsdt T(t)\nunittangent(::IntervalMap) unit tangent curve T(t) = fracdgammadtfracdtds\nspeed(::IntervalMap) tangent speed of a curve fracdsdt = leftfracdgamma(t)dtright\nnormal(::IntervalMap) kappa(t)N(t) = fracdTdtfracdtds = fracddtleft(fracdgammadtfracdtdsright)fracdtds\nunitnormal(::IntervalMap) N(t) = fracdTdtfracdtdskappa(t) normalized\ncurvature(::AbstractCurve) kappa(t) = leftfracdTdtfracdtdsright = leftfracddtleft(fracdgammadtfracdtdsright)fracdtdsright\nradius(::AbstractCurve) of curvature kappa(t)^-1 = leftfracddtleft(fracdgammadtfracdtdsright)fracdtdsright^-1\nevolute(::AbstractCurve) gamma + fracNkappa = gamma(t) + fracddtleft(fracdgammadtfracdtdsright)fracdtds(kappa(t))^2\ninvolute(::AbstractCurve) gamma - Ts = gamma(t) - left(fracdgamma(t)dtfracdtdsright)int_a^tfracdgamma(xi)dxidxi\nosculatingplane(::AbstractCurve) linear span of leftfracdsdtTkappa Nright\nunitosculatingplane(::AbstractCurve) linear span of leftTNright\nbinormal(::SpaceCurve) complement fracdsdtkappa B = star (fracdsdtTwedge kappa N)\nunitbinormal(::SpaceCurve) complement of plane B = star (Twedge N)\ntorsion(::SpaceCurve) tau(t) = leftfracdBdtfracdtdsright = leftfracddtstarleft(Twedge Nright)fracdtdsright\nframe(::AbstractCurve) scaled frame leftfracdsdtTkappa Nstar(fracdsdtTwedgekappa N)right\nunitframe(::AbstractCurve) Frenet frame leftTNstar(Twedge N)right\ncurvatures(::AbstractCurve) all degrees of freedom leftkappataudotsright\ncurvatures(::AbstractCurve,i) selects i-th curvature degree\nbishopframe(::SpaceCurve,theta_0=0) computes Bishop-style frame\nbishopunitframe(::SpaceCurve,theta_0=0) Bishop-style unit frame\nbishoppolar(::SpaceCurve,theta_0=0) Bishop polar (kappatheta_0+int_a^btau ds)\nbishop(::SpaceCurve,theta_0=0) kappa(cos(theta_0+int_a^btau ds)sin(theta_0+int_a^btau ds))\nplanecurve(::RealFunction,theta_0=0) from curvature kappa(t) and theta_0","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"qquad textstyle (kappa(t)theta_0) mapsto int_a^b leftcos (theta_0 + int_a^bkappa(t)dt)sin(theta_0+int_a^bkappa(t)dt)rightdt","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"linkmap(f::SpaceCurve,g::SpaceCurve) is ell(ts) = g(s)-f(t)\nlinknumber(f,g) of curves propto sectorintegrate circ unit circ linkmap","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. Surfaces gamma  mathbbR^2rightarrowmathbbR^3 with parametric gamma(x_1x_2) methods","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"graph outputs surface gamma mathbbR^nrightarrowmathbbR^ntimesmathbbR from scalar field fmathbbR^nrightarrowmathbbR\nnormal vector N(x) = star(fracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_n) or product fracpartial gamma(x)partial x_1timesfracpartial gamma(x)partial x_2\nunitnormal nu(x) = star(fracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_n)  star(fracpartial gamma(x)x_1wedgecdotswedgefracpartial gamma(x)partial x_n)\nnormalnorm is the norm of normal N(x) = star(fracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_n)\njacobian linear span of leftfracpartial gamma(x)partial x_1dotsfracpartial gamma(x)partial x_nright as TensorOperator\nweingarten linear span of leftfracpartial nu(x)partial x_1dotsfracpartial nu(x)partial x_nright as TensorOperator\nsectordet is the product gamma(x)wedgefracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_n, here with n = 2\nsectorintegral int fracgamma(x)n+1wedgefracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_ndx_1cdots dx_n with n=2\nsectorintegrate estimates the total value of sectorintegral\narea cumulative int star(fracpartial gamma(x)partial x_1wedgecdotswedgefracpartial gamma(x)partial x_n)dx_1cdots dx_n with n=2\nsurfacearea estimates total value of the (surface) area integral\nsurfacemetric gets GridBundle with firstform as metrictensor\nsurfacemetricdiag gets GridBundle with firstformdiag metric\nsurfaceframe constructs intrinsic orthonormal surface frame\nframe scaled Darboux style frame leftfracpartialgamma(x)partial x_1starleft(N(x)wedgefracpartialgamma(x)partial x_1right)N(x)right\nunitframe is then leftfracpartialgamma(x)partial x_1leftfracpartialgamma(x)partial x_1rightstarleft(nu(x)wedgefracpartialgamma(x)partial x_1right)leftfracpartialgamma(x)partial x_1rightnu(x)right\nfirstform I = g = beginbmatrix fracpartialgamma(x)partial x_1cdotfracpartialgamma(x)partial x_1  fracpartialgamma(x)partial x_1cdotfracpartialgamma(x)partial x_2  fracpartialgamma(x)partial x_1cdotfracpartialgamma(x)partial x_2  fracpartialgamma(x)partial x_2cdotfracpartialgamma(x)partial x_2 endbmatrix or firstformdiag\nsecondform II = beginbmatrix nu(x)cdotfracpartial^2gamma(x)partial x_1^2  nu(x)cdotfracpartial^2gamma(x)partial x_1partial x_2  nu(x)cdotfracpartial^2gamma(x)partial x_1partial x_2  nu(x)cdotfracpartial^2gamma(x)partial x_2^2 endbmatrix 2nd fundamental\nthirdform III is the composition map firstform circ unitnormal\nshape is the geometry shape operator I(x)^-1 II(x) of a surface gamma(x)\nprincipals (curvatures) are the composition eigvals circ shape\nprincipalaxes (curvatures) are the composition eigvecs circ shape\ncurvatures (polynomials) are the composition eigpolys circ shape\ncurvatures(::TensorField,i) selects i-th curvature polynomial\nmeancurvature is the mean curvature (first curvature) of the shape\ngaussintrinsic is the (intrinsic) Gauss curvature (last curvature)\ngaussextrinsic is the (extrinsic) Gauss curvature in sector form\ngausssign is the sign of the Gauss curvature of the shape","category":"page"},{"location":"fiber/#Interactive-computational-sessions","page":"Fiber","title":"Interactive computational sessions","text":"","category":"section"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Plane curves). Let t be parameter on interval from 0 to 4pi","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\nt = TensorField(0:0.01:4*pi)\nlin = Chain.(cos(t)*t,sin(t)*11+t)\nlines(lin); scaledarrows!(lin,unitframe(lin),gridsize=50)\nlines(arclength(lin))\nlines(speed(lin))\nlines(curvature(lin))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Get curvature from plane curve or construct planecurve from curvature:","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"lines(planecurve(cos(t)*t))\nlines(planecurve(cos(t*t)*t))\nlines(planecurve(cos(t)-t*sin(t)))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Lorenz). Observe vector fields by integrating streamlines","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Adapode, Makie # GLMakie\nLorenz(s,r,b) = x -> Chain(\n    s*(x[2]-x[1]), x[1]*(r-x[3])-x[2], x[1]*x[2]-b*x[3])\np = TensorField(ProductSpace(-40:0.2:40,-40:0.2:40,10:0.2:90))\nvf = Lorenz(10.0,60.0,8/3).(p) # pick Lorenz parameters, apply\nstreamplot(vf,gridsize=(10,10)) # visualize vector field","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"ODE solvers in the Adapode package are built on Cartan, providing both Runge-Kutta and multistep methods with optional adaptive time stepping.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"fun,x0 = Lorenz(10.0,60.0,8/3),Chain(10.0,10.0,10.0)\nic = InitialCondition(fun,x0,2pi) # tmax = 2pi\nlines(odesolve(ic,MultistepIntegrator{4}(2^-15)))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Riemann sphere). Project uparrow  omega mapsto (2omega+v_infty(omega^2-1))(omega^2+1) and then apply rotation before rejecting down downarrow omegamapsto((omegawedge b)v_infty)(1-v_inftycdotomega).","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\npts = TensorField(-2*pi:0.0001:2*pi)\n@basis S\"âˆž+++\" # Riemann sphere\nf(t) = â†“(exp(Ï€*t*((3/7)*v12+vâˆž3))>>>â†‘(v1+v2+v3))\nf(t) = â†“(exp(t*vâˆž*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2)>>>â†‘(v1+v2-v3))\nf(t) = â†“(exp(t*(v12+0.07vâˆž*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2))>>>â†‘(v1+v2-v3))\nlines(V(2,3,4).(f.(pts))) # applies to each f(t)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"@basis S\"âˆžâˆ…+++\" # conformal geometric algebra\nf(t) = â†“(exp(Ï€*t*((3/7)*v12+vâˆž3))>>>â†‘(v1+v2+v3))\nlines(V(3,4,5).(vector.(f.(pts))))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Bivector). using Grassmann, Cartan, Makie # GLMakie","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"basis\"2\" # Euclidean geometric algebra in 2 dimensions\nvdom = TensorField(ProductSpace{V}(-1.5:0.1:1.5,-1.5:0.1:1.5))\nstreamplot(tensorfield(exp(pi*v12/2)).(vdom))\nstreamplot(tensorfield(exp((pi/2)*v12/2)).(vdom))\nstreamplot(tensorfield(exp((pi/4)*v12/2)).(vdom))\nstreamplot(tensorfield(v1*exp((pi/4)*v12/2)).(vdom))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"@basis S\"+-\" # Geometric algebra with Lobachevskian plane\nvdom = TensorField(ProductSpace{V}(-1.5:0.1:1.5,-1.5:0.1:1.5))\nstreamplot(tensorfield(exp((pi/8)*v12/2)).(vdom))\nstreamplot(tensorfield(v1*exp((pi/4)*v12/2)).(vdom))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. using Grassmann, Cartan, Makie; @basis S\"âˆž+++\"","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"vdom1 = TensorField(ProductSpace{V(1,2,3)}(\n    -1.5:0.1:1.5,-1.5:0.1:1.5,-1.5:0.1:1.5));\ntf1 = tensorfield(exp((pi/4)*(v12+vâˆž3)),V(2,3,4)).(vdom1)\nstreamplot(tf1,gridsize=(10,10))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"vdom2 = TensorField(ProductSpace{V(2,3,4)}(\n    -1.5:0.1:1.5,-1.5:0.1:1.5,-1.5:0.1:1.5));\ntf2 = tensorfield(exp((pi/4)*(v12+vâˆž3)),V(2,3,4)).(vdom2)\nstreamplot(tf2,gridsize=(10,10))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. Let cdotdotscdot  mathfrak g^n rightarrow mathfrak g define the n-linear Lie bracket with","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"X_1dotsX_idotsX_n = sum_sigmain S_n varepsilon(sigma) X_sigma(1)(dots(X_sigma(i)(dots(X_sigma(n))dots))dots)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"In Grassmann and Cartan this definition can be accessed with Lie[Xi...].","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"In 2024, the author proved a new multilinear Lie bracket recursion formula.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Theorem (Lie bracket recursion). n-bracket is sum of (n-1)-brackets:","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"X_1dotsX_n = sum_i=1^n (-1)^i-1X_i(X_1dotsX_i-1X_i+1dotsX_n)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"This recursion can be explicitly expanded from the unary rule X = X,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"XY = X(Y) - Y(X)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"XYZ = X(YZ) - Y(XZ) + Z(XY)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"WXYZ = W(XYZ) - X(WYZ) + Y(WXZ) - Z(WXY)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"scriptstyle VWXYZ = V(WXYZ) - W(VXYZ) + X(VWYZ) - Y(VWXZ) + Z(VWXY)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"The multilinear Lie bracket recursion properly generalizes the bilinear Lie bracket to the n-linear case and is analogous to the Koszul complex of the Grassmann algebra; but is fundamentally different due to multilinear Lie bracket being non-associative, unlike the analogous exterior product.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Bracket). using Grassmann, Cartan, Makie # GLMakie","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"f1(x) = Chain(cos(3x[1]),sin(2x[1]))\nf2(x) = sin(x[1]/2)*sin(x[2])\nf3(x) = Chain(cos(x[1])*cos(x[2]),sin(x[2])*sin(x[1]))\nvf1 = f1.(TorusParameter(100,100))\nvf2 = gradient(f2.(TorusParameter(100,100)))\nvf3 = f3.(TorusParameter(100,100))\nlie1 = Lie[vf1,vf2] # Lie[vf1,vf2] == -Lie[vf2,vf1]\nlie2 = Lie[vf1,vf2,vf3] # ternary Lie bracket\nstreamplot(lie1); streamplot(lie2)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (int_Omega 1). Length of line, area of disk, and volume of ball","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"linspace = ProductSpace(-2:0.03:2) # using Grassmann, Cartan\ndiameter = TensorField(linspace, x->abs(x)<1) # radius = 1\n(integrate(diameter),2.0) # grid doesn't exactly align on 1.0","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(198v_1 20v_1)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"square = ProductSpace(-2:0.003:2,-2:0.003:2)\ndisk = TensorField(square, x->abs(x)<1) # radius = 1\n(integrate(disk),1pi)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(3141414000000001v_12 3141592653589793v_12)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"cube = ProductSpace(-2:0.07:2,-2:0.07:2,-2:0.07:2)\nball = TensorField(cube, x->abs(x)<1) # radius = 1\n(integrate(ball),4pi/3)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(4180680595387064v_123 41887902047863905v_123)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"However, this is inefficient numerical integration, for example the 58times58times58 cube has 195112 terms and the 1334times1334 square has 1779556 terms.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Theorem (Hyper-area of hypersurface). Let gammaXsubsetmathbb R^nrightarrowmathbb R^n+1 be parameterized hypersurface partial(Omega) = gamma(X). Since the pullback gamma^*(1) is det dgamma,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"\tint_partial(Omega) 1 = int_gamma(X) 1 = int_Xdet dgamma = int_X leftfracpartialgammapartial x_1 wedge dots wedge fracpartialgammapartial x_nright","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"\t\t\t = int_a_1^b_1dotsint_a_n^b_n det dgamma = int_a_1^b_1dotsint_a_n^b_n leftfracpartial gammapartial x_1 wedge dots wedge fracpartialgammapartial x_n right","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. Disk circumference, sphere spat using Grassmann,Cartan","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"t = TensorField(0:0.001:2pi)\ncirc = Chain.(cos(t),sin(t))\nspher(x) = Chain(\n    cos(x[2])*sin(x[1]), sin(x[2])*sin(x[1]),\n    cos(x[1])) # GeographicParameter is swapped convention\nsph = spher.(SphereParameter(60,60))\n[surfacearea(circ), 2pi] # or totalarclength for AbstractCurve\n[surfacearea(sph), 4pi]\nlines(circ); wireframe(sph) # using Makie # GLMakie","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"\tbeginmatrix\n\t\tbeginbmatrix\n\t\t\t6283000000652752  6283185307179586\n\t\tendbmatrix  quad \n\t\tbeginbmatrix\n\t\t\t12533742943601457  12566370614359172\n\tendbmatrix\n\tendmatrix","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Theorem (Sector integral). Let Xsubsetmathbb R^n and gamma  X rightarrow partial(Omega)subsetmathbb R^n+1 is parameterized hypersurface partial(Omega)=gamma(X) with gamma(x) = gamma(x_1dotsx_n), then","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"int_Omega 1 = fracrho^nn+1int_Xgammawedgefracpartialgammapartial x_1wedgecdotswedgefracpartialgammapartial x_n","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"so there exists Omega defining the sector of hypersurface gamma(X) with scale rho = 1.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Proof. Theorem proved by Michael Reed in Grassmann.jl and Cartan.jl research papers.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (int_Omega1). Recall circ,sph to evaluate ","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(sectorintegrate(circ),sectorintegrate(sph)) # more efficient","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(31415v_12 417791v_123)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Link number). Define the linkmap of two SpaceCurve instances f(t) and g(s) as parameterized hypersurface ell(st) = g(s)-f(t). As a corollary of the sector integral theorem combined with unit linkmap:","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"frac14piint_X gamma wedge fracpartialgammapartial twedgefracpartialgammapartial s = frac14piint_X fracg(s)-f(t)g(s)-f(t)^3wedge fracdf(t)dtwedgefracdg(s)ds","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"therefore Gauss linknumber is frac34pi times sectorintegrate circ unit circ linkmap when evaluated with parameterized hypersurface gamma(st) = ell(st)ell(st). So the linknumber divides sectorintegral of gamma(X) by the volume of ball Omega.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"t = TensorField(0:0.01:2pi) # using Grassmann, Cartan, Makie\nf(t) = Chain(cos(t[1]),sin(t[1]),0)\ng(t) = Chain(0,1+cos(t[1]),sin(t[1]))\nlines(f.(t)); lines!(g.(t)); (linknumber(f.(t),g.(t)), 1.0)\nmesh(linkmap(f.(t),g.(t)),normalnorm)\nmesh(unit(linkmap(f.(t),g.(t))),normalnorm)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Theorem (Gauss curvature). New alternative formulas for (extrinsic) Gauss curvature K_e and for (intrinsic) Gauss curvature K_i with normal N,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"K_e(x) = nu(x)wedgefracpartialnu(x)partial x_1wedgecdotswedgefracpartial nu(x)partial x_n quad \n\tK_i(x) = fracK_e(x)N(x)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"\tK_e(x) = leftstarleft(fracpartial nu(x)partial x_1wedgecdotswedgefracpartial nu(x)partial x_nright)right quad\n\tK_i(x) = fracK_e(x)N(x)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"With this formula, the Gauss-Bonnet integral is a sectorintegral theorem.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Torus).","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\ntorus(x) = Chain(\n    (2+0.5cos(x[1]))*cos(x[2]),\n    (2+0.5cos(x[1]))*sin(x[2]),\n    0.5sin(x[1]))\ntor = torus.(TorusParameter(60,60))\nmesh(tor,normalnorm)\nmesh(tor,meancurvature)\nmesh(tor,gausssign)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Wiggle).","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\nwobble(x) = (1+0.3sin(3x[1])+0.1cos(7x[2]))\nwumble(x) = (3+0.5cos(x[2]))\nwiggle(x) = Chain(\n    (wumble(x)+wobble(x)*cos(x[1]))*cos(x[2]),\n    (wumble(x)+wobble(x)*cos(x[1]))*sin(x[2]),\n    wobble(x)*sin(x[1]))\nwig = wiggle.(TorusParameter(60,60))\nmesh(wig,normalnorm)\nmesh(wig,gaussextrinsic)\nmesh(wig,gaussintrinsic)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Definition. When there is a Levi-Civita connection with zero torsion related to a metrictensor, then nabla_X Y - nabla_Y X = XY and there exist Christoffel symbols of the secondkind Gamma_ij^k = Gamma_ji^k with nabla_partial_ipartial_j = sum_k Gamma_ij^k partial_k. In particular, these can be expressed in terms of the metrictensor g as","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Gamma^k_ij = frac12 sum_m g^kmsetfracpartial g_mjpartial x_i + fracpartial g_impartial x_j - fracpartial g_ijpartial x_m ","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Local geodesic differential equations for Riemannian geometry are then","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"fracd^2 x_kdt^2 + sum_ij Gamma_ij^k fracdx_idtfracdx_jdt = 0","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. using Grassmann, Cartan, Adapode, Makie # GLMakie","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"torus(x) = Chain(\n    (2+0.5cos(x[1]))*cos(x[2]),\n    (2+0.5cos(x[1]))*sin(x[2]),\n    0.5sin(x[1]))\ntor = torus.(TorusParameter(60,60))\ntormet = surfacemetric(tor) # intrinsic metric\ntorcoef = secondkind(tormet) # Christoffel symbols\nic = geodesic(torcoef,Chain(1.0,1.0),Chain(1.0,sqrt(2)),10pi)\nsol = geosolve(ic,ExplicitIntegrator{4}(2^-7)) # Runge-Kutta\nlines(torus.(sol))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"totalarclength(sol) # apparent length of parameter path\n@basis MetricTensor([1 1; 1 1]) # abstract non-Euclidean V\nsolm = TensorField(tormet(sol),Chain{V}.(value.(fiber(sol))))\ntotalarclength(solm) # 2D estimate totalarclength(torus.(sol))\ntotalarclength(torus.(sol)) # compute in 3D Euclidean metric\nlines(solm) # parametric curve can have non-Euclidean metric\nlines(arclength(solm)); lines!(arclength(sol))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Klein geodesic). General ImmersedTopology are supported","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"klein(x) = klein(x[1],x[2]/2)\nfunction klein(v,u)\n    x = cos(u)*(-2/15)*(3cos(v)-30sin(u)+90sin(u)*cos(u)^4-\n        60sin(u)*cos(u)^6+5cos(u)*cos(v)*sin(u))\n    y = sin(u)*(-1/15)*(3cos(v)-3cos(v)*cos(u)^2-\n        48cos(v)*cos(u)^4+48cos(v)*cos(u)^6-\n        60sin(u)+5cos(u)*cos(v)*sin(u)-\n        5cos(v)*sin(u)*cos(u)^3-80cos(v)*sin(u)*cos(u)^5+\n        80cos(v)*sin(u)*cos(u)^7)\n    z = sin(v)*(2/15)*(3+5cos(u)*sin(u))\n    Chain(x,y,z)\nend # too long paths over QuotientTopology can stack overflow\nkle = klein.(KleinParameter(100,100))\nklecoef = secondkind(surfacemetric(kle))\nic = geodesic(klecoef,Chain(1.0,1.0),Chain(1.0,2.0),2pi)\nlines(geosolve(ic,ExplicitIntegrator{4}(2^-7)));wireframe(kle)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Upper half plane). Intrinsic hyperbolic Lobachevsky metric","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"halfplane(x) = TensorOperator(Chain(\n    Chain(Chain(0.0,inv(x[2])),Chain(-inv(x[2]),0.0)),\n    Chain(Chain(-inv(x[2]),0.0),Chain(0.0,-inv(x[2])))))\nz1 = geosolve(halfplane,Chain(1.0,1.0),Chain(1.0,2.0),10pi,7)\nz2 = geosolve(halfplane,Chain(1.0,0.1),Chain(1.0,2.0),10pi,7)\nz3 = geosolve(halfplane,Chain(1.0,0.5),Chain(1.0,2.0),10pi,7)\nz4 = geosolve(halfplane,Chain(1.0,1.0),Chain(1.0,1.0),10pi,7)\nz5 = geosolve(halfplane,Chain(1.0,1.0),Chain(1.0,1.5),10pi,7)\nlines(z1); lines!(z2); lines!(z3); lines!(z4); lines!(z5)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. Calculus over Hopf fibration is enabled by HopfTopology,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"stereohopf(x) = stereohopf(x[1],x[2],x[3])\nfunction stereohopf(theta,phi,psi)\n    a = cos(theta)*exp((im/2)*(psi-phi))\n    b = sin(theta)*exp((im/2)*(psi+phi))\n    Chain(imag(a),real(b),imag(b))/(1-real(a))\nend\nhs = stereohopf.(HopfParameter());\nalteration!(hs,wireframe,wireframe!)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. Streamplots on tangent spaces enabled by Cartan methods,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"spher(x) = Chain(\n    cos(x[2])*sin(x[1]), sin(x[2])*sin(x[1]),\n    cos(x[1])) # GeographicParameter is swapped convention\nsph = spher.(SphereParameter(60,60))\nf2(x) = sin(x[1]/2)*sin(x[2])\nvf2 = gradient(f2.(TorusParameter(100,100)))\nstreamplot(sph,vf2)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"torus(x) = Chain(\n    (2+0.5cos(x[1]))*cos(x[2]),\n    (2+0.5cos(x[1]))*sin(x[2]),\n    0.5sin(x[1]))\ntor = torus.(TorusParameter(60,60))\nf3(x) = Chain(cos(x[1])*cos(x[2]),sin(x[2])*sin(x[1]))\nvf3 = f3.(TorusParameter(100,100))\nstreamplot(tor,vf3)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (da Rios). The Cartan abstractions enable easily integrating","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"fracpartialgamma(x)partial x_2 = starleft(fracpartialgamma(x)partial x_1 wedge fracpartial^2gamma(x)partial x_1^2 right)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Adapode, Makie # GLMakie\nstart(x) = Chain(cos(x),sin(x),cos(1.5x)*sin(1.5x)/5)\nx1 = start.(TorusParameter(180));\ndarios(t,dt=tangent(fiber(t))) = hodge(wedge(dt,tangent(dt)))\nsol = odesolve(darios,x1,1.0,2^-11)\nmesh(sol,normalnorm)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Bishop frame). As an alternative to the standard Frenet style unitframe, the bishopunitframe(::SpaceCurve,angle::Real) has an optional angle (integration constant) modulo rotation of tangent axis.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\nstart(x) = Chain(cos(x),sin(x),cos(1.5x)*sin(1.5x)/5)\nx1 = start.(TorusParameter(180));\nscaledarrows(x1,bishopunitframe(x1),gridsize=25)\nlines!(x1,linestyle=:dash) # angle is optional","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Eigenmodes of disk). \t-Delta u = lambda u with boundary ncdotnabla u = 0 is enabled with assemble for stiffness and mass matrix from Adapode:","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Adapode, MATLAB, Makie # GLMakie\npt,pe = initmesh(\"circleg\",\"hmax\"=>0.1) # MATLAB circleg mesh\nA,M = assemble(pt,1,1,0) # stiffness & mass matrix assembly\nusing KrylovKit # provides general eigsolve\nyi,xi = geneigsolve((A,M),10,:SR;krylovdim=100) # maxiter=100\namp = TensorField.(Ref(pt),xi./3) # solutions amplitude\nmode = TensorField.(graphbundle.(amp),xi) # make 3D surface\nmesh(mode[7]); wireframe!(pt) # figure modes are 4,5,7,8,6,9","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"To build on the FiberBundle functionality of Cartan, the numerical analysis package Adapode is being developed to provide extra utilities for finite element method assemblies. Poisson equation (-nablacdot(cnabla u) = f) syntax or transport (-epsilonnabla^2u+ccdotnabla u = f) equations with finite element methods can be expressed in terms of methods like volumes using exterior products or gradienthat by applying the exterior algebra principles discussed. Global Grassmann element assembly problems involve applying geometric algebra locally per element basis and combining it with a global manifold topology.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"function solvepoisson(t,e,c,f,k,gD=0,gN=0)\n    m = volumes(t)\n    b = assembleload(t,f,m)\n    A = assemblestiffness(t,c,m)\n    R,r = assemblerobin(e,k,gD,gN)\n    return TensorField(t,(A+R)\\(b+r))\nend\nfunction solvetransport(t,e,c,f=1,eps=0.1)\n    m = volumes(t)\n    g = gradienthat(t,m)\n    A = assemblestiffness(t,eps,m,g)\n    b = assembleload(t,f,m)\n    C = assembleconvection(t,c,m,g)\n    TensorField(t,solvedirichlet(A+C,b,e))\nend\nfunction solvetransportdiffusion(tf,ek,c,d,gD=0,gN=0)\n    t,f,e,k = base(tf),fiber(tf),base(ek),fiber(ek)\n    m = volumes(t)\n    g = gradienthat(t,m)\n    A = assemblestiffness(t,c,m,g)\n    b = means(immersion(t),f)\n    C = assembleconvection(t,b,m,g)\n    Sd = assembleSD(t,sqrt(d)*b,m,g)\n    R,r = assemblerobin(e,k,gD,gN)\n    return TensorField(t,(A+R-C'+Sd)\\r)\nend","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"More general problems for finite element boundary value problems are also enabled by mesh representations imported into Cartan from external sources and computationally operated on in terms of Grassmann algebra. Many of these methods automatically generalize to higher dimensional manifolds and are compatible with discrete differential geometry. Further advanced features such as DiscontinuousTopology have been implemented and the LagrangeTopology variant of SimplexTopology is being used in research.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Heatflow around airfoil). FlowGeometry builds on Cartan to provide NACA airfoil shapes, and Adapode can solve transport diffusion.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Adapode, FlowGeometry, MATLAB, Makie # GLMakie\npt,pe = initmesh(decsg(NACA\"6511\"),\"hmax\"=>0.1)\ntf = solvepoisson(pt,pe,1,0,\n    x->(x[2]>3.49 ? 1e6 : 0.0),0,x->(x[2]<-1.49 ? 1.0 : 0.0))\nfunction kappa(z); x = base(z)\n    if x[2]<-1.49 || sqrt((x[2]-0.5)^2+x[3]^2)<0.51\n        1e6\n    else\n        x[2]>3.49 ? fiber(z)[1] : 0.0\n    end\nend\ngtf = -gradient(tf)\nkf = kappa.(gtf(immersion(pe)))\ntf2 = solvetransportdiffusion(gtf,kf,0.01,1/50,\n    x->(sqrt((x[2]-0.5)^2+x[3]^2)<0.7 ? 1.0 : 0.0))\nwireframe(pt)\nstreamplot(gtf,-0.3..1.3,-0.2..0.2)\nmesh(tf2)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example. Most finite element methods using Grassmann, Cartan automatically generalize to higher dimension manifolds with e.g. tetrahedra, and the author has contributed to packages such as Triangulate.jl, TetGen.jl.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Adapode, FlowGeometry, MiniQhull, TetGen\nps = sphere(sphere(âˆ‚(delaunay(PointCloud(sphere())))))\npt,pe = tetrahedralize(cubesphere(),\"vpq1.414a0.1\";\n    holes=[TetGen.Point(0.0,0.0,0.0)])\ntf = solvepoisson(pt,pe,1,0,\n    x->(x[2]>1.99 ? 1e6 : 0.0),0,x->(x[2]<-1.99 ? 1.0 : 0.0))\nstreamplot(-gradient(tf),-1.1..1.1,-1.1..1.1,-1.1..1.1,\n    gridsize=(10,10,10))\nwireframe!(ps)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Maxwell's equations rewritten). Cartan has Nedelec edge interpolation useful for solving the time harmonic wave equation. Form Maxwell's equations using the Faraday bivector dA with ddA = 0,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Ev_t + star(Bv_t) = (nabla V - partial_t A)v_t + star((star dA)v_t) = dA","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"where E is electric field, B magnetic field, A is vector potential.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"ddA = 0 Longleftrightarrow begincases partial B = 0  textGausss law  star dE = -partial_t B  textFaradays law endcases","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"star dstar dA = J Longleftrightarrow begincases partial E = rho  textGausss law  star dB = J + partial_t E  textAmperes law endcases","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Maxwell's equations simplify to a single spacetime wave equation.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"nabla(E v_t + star(B v_t)) = nabla dA = star dstar dA = nabla^2A = J","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Example (Stokes theorem). Paraboloid S=gamma(X) bound by compact support disk of radius 3, with circle f(02pi)=partial(S), and vector field F:","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"using Grassmann, Cartan, Makie # GLMakie\nsquare = TensorField(ProductSpace(-3:0.003:3,-3:0.003:3))\ncube = TensorField(ProductSpace(-4:0.1:4,-4:0.1:4,-1:0.2:10))\ndisk = (x->float(abs(x)<3)).(square) # compact support\nparaboloid(x) = 9-x[1]*x[1]-x[2]*x[2]\nS = graph(disk*paraboloid.(square))\nF(x) = Chain(2x[3]-x[2],x[1]+x[3],3x[1]-2x[2])\nmesh(S,normalnorm)\nscaledarrows!(S,disk*unitnormal(S),gridsize=(22,22))\nstreamplot!(F.(cube),gridsize=(11,11,11))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"int_S nablatimes Fcdot dS = int_X (nablatimes F) cdot left(fracpartialgamma(x)partial x_1timesfracpartialgamma(x)partial x_2right)dx_1dx_2","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"integrate(disk*(curl(F.(cube)).(S) â‹… normal(S)))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"int_partial(S) Fcdot ds = int_0^2pi F(f(t))cdot f(t) dt","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"t = TensorField(0:0.001:2pi)\nf(t) = Chain(3cos(t[1]),3sin(t[1]),0.0)\nintegrate(F.(f.(t)) â‹… tangent(f.(t)))","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"int_S nablatimes Fcdot dS = int_partial(S) Fcdot ds","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"565474 approx 56547 approx 56548667764616276 approx 18pi","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Both integration techniques come out to the same answer, this is called Stokes theorem, a special case of the more general Stokes-Cartan theorem.","category":"page"},{"location":"fiber/#Summary-of-Grassmann.jl-and-Cartan.jl","page":"Fiber","title":"Summary of Grassmann.jl and Cartan.jl","text":"","category":"section"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Grassmann.jl and Cartan.jl pioneered many computational language design aspects for fully generalized high performance computing with differential geometric algebra. All of the mathematical types and operations in this program were implemented from scratch with fundamental mathematical principles merged to Juliaâ€™s type polymorphism code generation, which has been refined and is being optimized for scientific computing over time.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"This leads to the capability for multiple dispatch polymorphisms with type aliases such as Scalar, GradedVector, Bivector, Trivector, or also Quaternion, Simplex, etc. There are aliases such as Positions, Interval, IntervalRange, Rectangle, Hyperrectangle, RealRegion, RealSpace, or the many aliases of the type TensorField, such as ElementMap, SimplexMap, FaceMap, IntervalMap, RectangleMap, HyperrectangleMap, Variation, ParametricMap, RealFunction, PlaneCurve, SpaceCurve, AbstractCurve, SurfaceGrid, VolumeGrid, ScalarGrid, CliffordField, DiagonalField, EndomorphismField, OutermorphismField, ComplexMap, PhasorField, or QuaternionField, SpinorField, GradedField, ScalarField VectorField BivectorField, TrivectorField. Versatility of the Grassmann and Cartan type system opens up many possibilities for computational language design.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"This is a new paradigm of geometric algebra, anti-symmetric tensor products, rotational algebras, bivector groups, and multilinear Lie brackets. Algebra based on Leibniz differentials and Grassmann's exterior calculus extended with TensorField sections over a FrameBundle yields differential geometric algebra based on the ImmersedTopology of a FiberBundle.  The sector integral theorem is a new alternative specialization to the Stokes-Cartan theorem for general integrals in differential geometry, relating an integral on a manifold and an integral on its boundary. Sector integral theory is a new alternative formalism enabling Cartan style calculations.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"By Grassmann's exterior & interior products, the Hodge-DeRahm chain complex from cohomology theory is","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"0 undersetpartialoversetdrightleftarrows Omega^0(M) undersetpartialoversetdrightleftarrows Omega^1(M) undersetpartialoversetdrightleftarrows cdots undersetpartialoversetdrightleftarrows Omega^n(M) undersetpartialoversetdrightleftarrows 0","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"having dimensional equivalence brought by the Grassmann-Hodge complement,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"mathcal H^n-pM cong fractextker(dOmega^n-pM)textim(dOmega^n-p+1M) qquad dimmathcal H^pM = dimfractextker(partialOmega^pM)textim(partialOmega^p+1M)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"The rank of the grade p boundary incidence operator is","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"textranklanglepartiallangle Mrangle_p+1rangle_p = mindimlanglepartiallangle Mrangle_p+1rangle_pdimlangle Mrangle_p+1","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Invariant topological information can be computed using the rank of homology,","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"b_p(M) = dimlangle Mrangle_p+1 - textranklanglepartiallangle Mrangle_p+1rangle_p - textranklanglepartiallangle Mrangle_p+2rangle_p+1","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"are the Betti numbers with Euler characteristic chi(M) = sum_p (-1)^pb_p.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Grassmann algebra is a unifying mathematical foundation. Improving efficiency of multi-disciplinary research using differential geometric algebra by relying on universal mathematical principles is possible. Transforming superficial knowledge into deeper understanding is then achieved with the unified foundations widely applicable to the many different sub-disciplines related to geometry and mathematical physics. During the early stages when Grassmann.jl and Cartan.jl were being developed, many new computational language design principles were pioneered for differential geometric algebra research and development with a modern interactive scientific programming language. With the interest surrounding the project increasing, there have been some other similar projects taking inspiration from the Grassmann.jl computational language design and thus validating the concepts.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"While some of the computational language designs in Grassmann.jl and Cartan.jl may seem like obvious choices for people seeing the completed idea, please be aware that it has taken an enormous amount of creativity and effort to make the many different decisions for these projects. The style of computational language the author wanted to use didn't exist yet before, so if it really was such an obvious designâ€“then why didn't it exist before? It took a lot of deep thinking and trying out previously overlooked ideas.","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"(Image: JuliaCon 2019) (Image: Grassmann.jl YouTube) (Image: PDF 2019) (Image: PDF 2021) (Image: PDF 2025) (Image: Docs Dev)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"Michael Reed, Differential geometric algebra with Leibniz and Grassmann (2019)\nMichael Reed, Foundatons of differential geometric algebra (2021)\nMichael Reed, Multilinear Lie bracket recursion formula (2024)\nMichael Reed, Differential geometric algebra: compute using Grassmann.jl and Cartan.jl (2025)\nEmil Artin, Geometric Algebra (1957)\nJohn Browne, Grassmann Algebra, Volume 1: Foundations (2011)\nC. Doran, D. Hestenes, F. Sommen, and N. Van Acker, Lie groups as spin groups, J. Math Phys. (1993)\nDavid Hestenes, Universal Geometric Algebra, Pure and Applied (1988)\nDavid Hestenes, Renatus Ziegler, Projective Geometry with Clifford Algebra, Acta Appl. Math. (1991)\nDavid Hestenes, Tutorial on geometric calculus. Advances in Applied Clifford Algebra (2013)\nLachlan Gunn, Derek Abbott, James Chappell, Ashar Iqbal, Functions of multivector variables (2011)\nAaron D. Schutte, A nilpotent algebra approach to Lagrangian mechanics and constrained motion (2016)\nVladimir and Tijana Ivancevic, Undergraduate lecture notes in DeRahm-Hodge theory. arXiv (2011)\nPeter Woit, Clifford algebras and spin groups, Lecture Notes (2012)","category":"page"},{"location":"fiber/","page":"Fiber","title":"Fiber","text":"       _           _                         _\n      | |         | |                       | |\n   ___| |__   __ _| | ___ __ __ ___   ____ _| | __ _\n  / __| '_ \\ / _` | |/ / '__/ _` \\ \\ / / _` | |/ _` |\n | (__| | | | (_| |   <| | | (_| |\\ V / (_| | | (_| |\n  \\___|_| |_|\\__,_|_|\\_\\_|  \\__,_| \\_/ \\__,_|_|\\__,_|\n\n   https://github.com/chakravala\n   https://crucialflow.com\n   ____  ____    ____   _____  _____ ___ ___   ____  ____   ____\n  /    T|    \\  /    T / ___/ / ___/|   T   T /    T|    \\ |    \\\n Y   __j|  D  )Y  o  |(   \\_ (   \\_ | _   _ |Y  o  ||  _  Y|  _  Y\n |  T  ||    / |     | \\__  T \\__  T|  \\_/  ||     ||  |  ||  |  |\n |  l_ ||    \\ |  _  | /  \\ | /  \\ ||   |   ||  _  ||  |  ||  |  |\n |     ||  .  Y|  |  | \\    | \\    ||   |   ||  |  ||  |  ||  |  |\n l___,_jl__j\\_jl__j__j  \\___j  \\___jl___j___jl__j__jl__j__jl__j__j\n _________                __                  __________\n \\_   ___ \\_____ ________/  |______    ____   \\\\       /\n /    \\  \\/\\__  \\\\_  __ \\   __\\__  \\  /    \\   \\\\     /\n \\     \\____/ __ \\|  | \\/|  |  / __ \\|   |  \\   \\\\   /\n  \\______  (____  /__|   |__| (____  /___|  /    \\\\ /\n         \\/     \\/                 \\/     \\/      \\/","category":"page"},{"location":"plot/#Cartan.jl-plotting","page":"Plotting","title":"Cartan.jl plotting","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"Pages = [\"index.md\",\"fiber.md\",\"videos.md\",\"library.md\",\"plot.md\"]","category":"page"},{"location":"plot/#Makie.jl","page":"Plotting","title":"Makie.jl","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference","category":"page"},{"location":"plot/#arrows","page":"Plotting","title":"arrows","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/arrows","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"f = Figure(size = (800, 800))\nAxis(f[1, 1], backgroundcolor = \"black\")\n\nxs = LinRange(0, 2pi, 20)\nys = LinRange(0, 3pi, 20)\nus = [sin(x) * cos(y) for x in xs, y in ys]\nvs = [-cos(x) * sin(y) for x in xs, y in ys]\nxy = TensorField(OpenParameter(xs,ys),Chain.(us,vs))\nstrength = vec(fiber(norm(xy)))\n\narrows!(xy, lengthscale = 0.2, color = strength)\n\nf","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nps = OpenParameter(-5:2:5,-5:2:5,-5:2:5)\nns = map(p -> 0.1 * Chain(p[2], p[3], p[1]), ps)\narrows(\n    TensorField(ps, ns),\n    shaftcolor = :gray, tipcolor = :black,\n    align = :center, axis=(type=Axis3,)\n)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"lengths = vec(norm.(ns))\narrows(\n    TensorField(ps, ns), color = lengths, lengthscale = 1.5,\n    align = :center, axis=(type=Axis3,)\n)","category":"page"},{"location":"plot/#contour","page":"Plotting","title":"contour","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/contour","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"f = Figure()\nAxis(f[1, 1])\n\nxs = LinRange(0, 10, 100)\nys = LinRange(0, 15, 100)\nzs = [cos(x) * sin(y) for x in xs, y in ys]\nxyz = TensorField(OpenParameter(xs,ys),zs)\n\ncontour!(xyz)\ncontour!(xyz,levels=-1:0.1:1)\n\nf","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"himmelblau(x, y) = (x^2 + y - 11)^2 + (x + y^2 - 7)^2\nx = y = range(-6, 6; length=100)\nz = himmelblau.(x, y')\n\nlevels = 10.0.^range(0.3, 3.5; length=10)\ncolorscale = ReversibleScale(x -> x^(1 / 10), x -> x^10)\nxyz = TensorField(OpenParameter(x,y),z)\nf, ax, ct = contour(xyz; labels=true, levels, colormap=:hsv, colorscale)\nf","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"x = -10:10\ny = -10:10\n# The curvilinear grid:\nxs = [x + 0.01y^3 for x in x, y in y]\nys = [y + 10cos(x/40) for x in x, y in y]\n\n# Now, for simplicity, we calculate the `zs` values to be\n# the radius from the center of the grid (0, 10).\nzs = sqrt.(xs .^ 2 .+ (ys .- 10) .^ 2)\n\n# We can use Makie's tick finders to get some nice looking contour levels:\nlevels = Makie.get_tickvalues(Makie.LinearTicks(7), extrema(zs)...)\n\nxyz = TensorField(GridBundle(Chain.(xs,ys)),zs)\n\n# and now, we plot!\nfig, ax, srf = mesh(xyz; shading = NoShading, axis = (; type = Axis, aspect = DataAspect()))\nctr = contour!(ax, xs, ys, zs; color = :orange, levels = levels, labels = true, labelfont = :bold, labelsize = 12)\n\nfig","category":"page"},{"location":"plot/#contour3d","page":"Plotting","title":"contour3d","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/contour3d","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nf = Figure()\nAxis3(f[1, 1], aspect=(0.5,0.5,1), perspectiveness=0.75)\n\nxs = ys = LinRange(-0.5, 0.5, 100)\nzs = [sqrt(x^2+y^2) for x in xs, y in ys]\n\nxyz = TensorField(OpenParameter(xs,ys),zs)\n\ncontour3d!(-xyz, linewidth=2, color=:blue2)\ncontour3d!(+xyz, linewidth=2, color=:red2)\n\nf","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"f = Figure()\nAxis3(f[1, 1], aspect=(0.5,0.5,1), perspectiveness=0.75)\n\ncontour3d!(-xyz, levels=-(.025:0.05:.475), linewidth=2, color=:blue2)\ncontour3d!(+xyz, levels=  .025:0.05:.475,  linewidth=2, color=:red2)","category":"page"},{"location":"plot/#heatmap","page":"Plotting","title":"heatmap","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/heatmap","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"xs = range(0, 2Ï€, length=100)\nys = range(0, 2Ï€, length=100)\nzs = [sin(x*y) for x in xs, y in ys]\n\nxyz = TensorField(OpenParameter(xs,ys),zs)\n\nfig, ax, hm = heatmap(xyz)\nColorbar(fig[:, end+1], hm)\n\nfig","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"x = 10.0.^(1:0.1:4)\ny = 1.0:0.1:5.0\nz = broadcast((x, y) -> x - 10, x, y')\n\nxyz = TensorField(OpenParameter(x,collect(y)),z)\n\nscale = ReversibleScale(x -> asinh(x / 2) / log(10), x -> 2sinh(log(10) * x))\nfig, ax, hm = heatmap(xyz; colorscale = scale, axis = (; xscale = scale))\nColorbar(fig[1, 2], hm)\n\nfig","category":"page"},{"location":"plot/#lines","page":"Plotting","title":"lines","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/lines","category":"page"},{"location":"plot/#linesegments","page":"Plotting","title":"linesegments","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/linesegments","category":"page"},{"location":"plot/#mesh","page":"Plotting","title":"mesh","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/mesh","category":"page"},{"location":"plot/#poly","page":"Plotting","title":"poly","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/poly","category":"page"},{"location":"plot/#scatter","page":"Plotting","title":"scatter","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/scatter","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"xs = range(0, 10, length = 30)\nys = 0.5 .* sin.(xs)\nxy = TensorField(xs,ys)\n\nscatter(xy)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"xs = range(0, 10, length = 30)\nys = 0.5 .* sin.(xs)\npts = TensorField(xs,Chain.(xs, ys))\n\nscatter(pts, color = 1:30, markersize = range(5, 30, length = 30),\n    colormap = :thermal)","category":"page"},{"location":"plot/#scatterlines","page":"Plotting","title":"scatterlines","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/scatterlines","category":"page"},{"location":"plot/#streamplot","page":"Plotting","title":"streamplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/streamplot","category":"page"},{"location":"plot/#surface","page":"Plotting","title":"surface","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/surface","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nxs = LinRange(0, 10, 100)\nys = LinRange(0, 15, 100)\nzs = [cos(x) * sin(y) for x in xs, y in ys]\nxyz = TensorField(OpenParameter(xs,ys),zs)\n\nsurface(xyz, axis=(type=Axis3,))","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nrs = 1:10\nthetas = 0:10:360\n\nxs = rs .* cosd.(thetas')\nys = rs .* sind.(thetas')\nzs = sin.(rs) .* cosd.(thetas')\nxyz = TensorField(OpenParameter(collect(rs),collect(thetas)),Chain.(xs,ys,zs))\n\nmesh(xy,TensorField(xy,zs))","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"xy = TensorField(OpenParameter(collect(rs),collect(thetas)),Chain.(xs,ys))\n\nmesh(xy,TensorField(xy,zs),shading=NoShading)","category":"page"},{"location":"plot/#volume","page":"Plotting","title":"volume","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/volume","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nr = LinRange(-1, 1, 100)\nrrr = OpenParameter(r,r,r)\ncube = Real(abs2(rrr))\ncontour(abs2(rrr),alpha=0.5)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"cube_with_holes = cube*(cube .> 1.4)\nMakie.volume(cube_with_holes,algorithm=:iso,isorange=0.05,isovalue=1.7)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nr = -5:5\ndata = map([(x,y,z) for x in r, y in r, z in r]) do (x,y,z)\n    1 + min(abs(x), abs(y), abs(z))\nend\ncolormap = [:red, :transparent, :transparent, RGBAf(0,1,0,0.5), :transparent, :blue]\nrrr = OpenParameter(r,r,r)\nMakie.volume(TensorField(rrr,data), algorithm = :indexedabsorption, colormap = colormap,\n    interpolate = false, absorption = 5)","category":"page"},{"location":"plot/#voxels","page":"Plotting","title":"voxels","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/voxels","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\n# Same as volume example\nr = LinRange(-1, 1, 100)\nrrr = OpenParameter(r,r,r)\ncube = Real(abs2(rrr))\ncube_with_holes = cube*(cube .> 1.4)\n\n# To match the volume example with isovalue=1.7 and isorange=0.05 we map all\n# values outside the range (1.65..1.75) to invisible air blocks with is_air\nf, a, p = voxels(cube_with_holes, is_air = x -> !(1.65 <= x <= 1.75))","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nchunk = TensorField(OpenParameter(3,3,3),reshape(collect(1:27), 3, 3, 3))\nvoxels(chunk, gap = 0.33)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nchunk = TensorField(OpenParameter(8,8,8),reshape(collect(1:512), 8, 8, 8))\n\nf, a, p = voxels(chunk,\n    colorrange = (65, 448), colorscale = log10,\n    lowclip = :red, highclip = :orange,\n    colormap = [:blue, :green]\n)","category":"page"},{"location":"plot/#wireframe","page":"Plotting","title":"wireframe","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://docs.makie.org/stable/reference/plots/wireframe","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using GLMakie\nx, y = collect(-8:0.5:8), collect(-8:0.5:8)\nz = [sinc(âˆš(X^2 + Y^2) / Ï€) for X âˆˆ x, Y âˆˆ y]\nxyz = TensorField(OpenParameter(x,y),z)\nwireframe(xyz, axis=(type=Axis3,), color=:black)","category":"page"},{"location":"plot/#UnicodePlots.jl","page":"Plotting","title":"UnicodePlots.jl","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"https://github.com/JuliaPlots/UnicodePlots.jl","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"using UnicodePlots\nlineplot(TensorField([-1, 2, 3, 7], [-1, 2, 9, 4]), title=\"Example\", name=\"my line\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"plt = lineplot(TensorField([-1, 2, 3, 7], [-1, 2, 9, 4]), title=\"Example\", name=\"my line\",\n               xlabel=\"x\", ylabel=\"y\", canvas=DotCanvas, border=:ascii)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"lineplot!(plt, TensorField([0, 4, 8], [10, 1, 10]), color=:cyan, name=\"other line\")","category":"page"},{"location":"plot/#lineplot","page":"Plotting","title":"lineplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"lineplot(TensorField([1, 2, 7], [9, -6, 8]), title=\"My Lineplot\")","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"lineplot(TensorField(1:10, Chain.(0:9,3:12,reverse(5:14),fill(4, 10))), color=[:green :red :yellow :cyan])","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"lineplot(TensorField(1:10, 1:10), head_tail=:head, head_tail_frac=.1, height=4)","category":"page"},{"location":"plot/#scatterplot","page":"Plotting","title":"scatterplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"scatterplot(TensorField(randn(50), randn(50)), title=\"My Scatterplot\")","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"scatterplot(TensorField(1:10, 1:10), xscale=:log10, yscale=:log10)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"scatterplot(TensorField(1:4, 1:4), xscale=:log10, yscale=:ln, unicode_exponent=false, height=6)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"scatterplot(TensorField([1, 2, 3], [3, 4, 1]), marker=[:circle, 'î €', \"âˆ«\"],\n            color=[:cyan, nothing, :yellow], height=2)","category":"page"},{"location":"plot/#histogram","page":"Plotting","title":"histogram","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"histogram(TensorField(1:1000, randn(1_000) .* .1), nbins=15, closed=:left)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"histogram(TensorField(1:1000, randn(1_000) .* .1), nbins=15, closed=:right, xscale=:log10)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"histogram(TensorField(1:100000, randn(100_000) .* .1), nbins=60, vertical=true, height=10)","category":"page"},{"location":"plot/#boxplot","page":"Plotting","title":"boxplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"boxplot(TensorField(1:6, [1, 3, 3, 4, 6, 10]))","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"boxplot(TensorField(1:8,\n        Chain.([1, 2, 3, 4, 5, 4, 3, 2], [2, 3, 4, 5, 6, 7, 8, 9])),\n        title=\"Grouped Boxplot\", xlabel=\"x\")","category":"page"},{"location":"plot/#densityplot","page":"Plotting","title":"densityplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"plt = densityplot(Chain.(randn(10_000), randn(10_000)))\ndensityplot!(plt, Chain.(randn(10_000) .+ 2, randn(10_000) .+ 2))","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"x = randn(10_000); x[1_000:6_000] .= 2\ndensityplot(Chain.(x, randn(10_000)); dscale=x -> log(1 + x))","category":"page"},{"location":"plot/#contourplot","page":"Plotting","title":"contourplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"contourplot(TensorField(OpenParameter(-3:.01:3, -7:.01:3), xy -> exp(-(xy[1] / 2)^2 - ((xy[2] + 2) / 4)^2)))","category":"page"},{"location":"plot/#polarplot","page":"Plotting","title":"polarplot","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"polarplot(TensorField(range(0, 2Ï€, length=20), range(0, 2, length=20)))","category":"page"},{"location":"plot/#heatmap-2","page":"Plotting","title":"heatmap","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"heatmap(TensorField(OpenParameter(11,11), repeat(collect(0:10)', outer=(11, 1))), zlabel=\"z\")","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"heatmap(TensorField(OpenParameter(31,31), collect(0:30) * collect(0:30)'), xfact=.1, yfact=.1, xoffset=-1.5, colormap=:inferno)","category":"page"},{"location":"plot/#surface-2","page":"Plotting","title":"surface","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"sombrero(xy) = 15sinc(âˆš(xy[1]^2 + xy[2]^2) / Ï€)\nsurfaceplot(TensorField(OpenParameter(-8:.5:8,-8:.5:8),sombrero),colormap=:jet)","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"surfaceplot(TensorField(OpenParameter(-3:3, -3:3),\n    xy -> 15sinc(âˆš(xy[1]^2 + xy[2]^2) / Ï€)),\n    zscale=z -> 0, lines=true, colormap=:jet)","category":"page"},{"location":"plot/#isosurface","page":"Plotting","title":"isosurface","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"rrr = OpenParameter(-1:.1:1, -1:.1:1, -1:.1:1)\ntorus(xyz, r=0.2, R=0.5) = (âˆš(xyz[1]^2 + xyz[2]^2) - R)^2 + xyz[3]^2 - r^2\nisosurface(TensorField(rrr,torus), cull=true, zoom=2, elevation=50)","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"                        Preamble","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a programâ€“to make sure it remains free software for all its users.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The precise terms and conditions for copying, distribution and modification follow.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"                   TERMS AND CONDITIONS","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Definitions.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"\"This License\" refers to version 3 of the GNU Affero General Public License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A \"covered work\" means either the unmodified Program or a work based on the Program.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Source Code.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The Corresponding Source for a work in source code form is that same work.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Basic Permissions.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Protecting Users' Legal Rights From Anti-Circumvention Law.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Conveying Verbatim Copies.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Conveying Modified Source Versions.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Conveying Non-Source Forms.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Additional Terms.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Termination.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Acceptance Not Required for Having Copies.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Automatic Licensing of Downstream Recipients.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Patents.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"No Surrender of Others' Freedom.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Remote Network Interaction; Use with the GNU General Public License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Revised Versions of this License.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Disclaimer of Warranty.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Limitation of Liability.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Interpretation of Sections 15 and 16.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"Also add information on how to contact you by electronic and paper mail.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.","category":"page"},{"location":"agpl/","page":"AGPL-3.0","title":"AGPL-3.0","text":"You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.","category":"page"},{"location":"#Cartan.jl","page":"Home","title":"Cartan.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TensorField topology over FrameBundle âˆ‡ with Grassmann.jl elements","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: DOI) (Image: Docs Dev) (Image: GitHub tag (latest SemVer)) (Image: Build status) (Image: PDF 2021) (Image: PDF 2025)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cartan.jl introduces a pioneering unified numerical framework for comprehensive differential geometric algebra, purpose-built for the formulation and solution of partial differential equations on manifolds with non-trivial topological structure and Grassmann.jl algebra. Written in Julia, Cartan.jl unifies differential geometry, geometric algebra, and tensor calculus with support for fiber product topology; enabling directly executable generalized treatment of geometric PDEs over grids, meshes, and simplicial decompositions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The system supports intrinsic formulations of differential operators (including the exterior derivative, codifferential, Lie derivative, interior product, and Hodge star) using a coordinate-free algebraic language grounded in Grassmann-Cartan multivector theory. Its core architecture accomodates numerical representations of fiber bundles, product manifolds, and submanifold immersion, providing native support for PDE models defined on structured or unstructured domains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cartan.jl integrates naturally with simplex-based finite element exterior calculus, allowing for geometrical discretizations of field theories and conservation laws. With its synthesis of symbolic abstraction and numerical execution, Cartan.jl empowers researchers to develop PDE models that are simultaneously founded in differential geometry, algebraically consistent, and computationally expressive, opening new directions for scientific computing at the interface of geometry, algebra, and analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":" _________                __                  __________\n \\_   ___ \\_____ ________/  |______    ____   \\\\       /\n /    \\  \\/\\__  \\\\_  __ \\   __\\__  \\  /    \\   \\\\     /\n \\     \\____/ __ \\|  | \\/|  |  / __ \\|   |  \\   \\\\   /\n  \\______  (____  /__|   |__| (____  /___|  /    \\\\ /\n         \\/     \\/                 \\/     \\/      \\/","category":"page"},{"location":"","page":"Home","title":"Home","text":"developed by chakravala with Grassmann.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Provides TensorField{B,F,N} <: GlobalFiber{LocalTensor{B,F},N} implementation for both a local ProductSpace and general ImmersedTopology specifications on any FrameBundle expressed with Grassmann.jl algebra. Many of these modular methods can work on input meshes or product topologies of any dimension, although there are some methods which are specialized. Building on this, Cartan provides an algebra for FiberBundle sections and associated bundles on a manifold, such as general Connection, LieDerivative, and CovariantDerivative operators in terms of Grassmann elements. Calculus of Variation fields can also be generated with the combined topology of a FiberProductBundle. Furthermore, the FiberProduct structure enables construction of HomotopyBundle types. Utility package for differential geometry and tensor calculus intended for Adapode.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Cartan package is intended to standardize the composition of various methods and functors applied to specialized categories transformed with a unified representation over a product topology, especially having fibers of the Grassmann algebra. Initial topologies include ProductSpace types and in general the ImmersedTopology.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"fiber.md\",\"videos.md\",\"library.md\",\"plot.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"This Cartan package for the Julia language was created by github.com/chakravala for mathematics and computer algebra research with differential geometric algebras. These projects and repositories were started entirely independently and are available as free software to help spread the ideas to a wider audience. Please consider donating to show your thanks and appreciation to this project at liberapay, GitHub Sponsors, Patreon, Tidelift, Bandcamp or contribute (documentation, tests, examples) in the repositories.","category":"page"}]
}
